{"version":3,"mappings":"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","names":["PhaserGame","React","lazy","Promise","resolve","then","PhaserGame$1","default","module","GameBoyScreen","className","onContentTrigger","jsxs","children","jsx","style","imageRendering","Suspense","fallback","animationDelay","announceToScreenReader","message","priority","announcement","document","createElement","setAttribute","textContent","body","appendChild","setTimeout","removeChild","gameAccessibility","announceGameStart","announceMovement","direction","announceJump","announceBoxHit","contentType","resume","portfolio","contact","announceContentLoad","home","keyboardNavigation","event","key","toLowerCase","callback","preventDefault","initAccessibility","querySelector","id","head","highContrastSupport","prefersHighContrast","window","matchMedia","matches","applyHighContrast","classList","add","reducedMotionSupport","prefersReducedMotion","applyReducedMotion","GameBoyButtons","onButtonPress","pressedButton","setPressedButton","useState","handleButtonPress","button","navigator","vibrate","handleTouchStart","e","handleKeyDown","nativeEvent","onClick","onTouchStart","onKeyDown","GameBoyShell","screenRef","useRef","ref","gameContainer","current","Array","from","length","_","i","GameEventBus","static","events","constructor","getInstance","instance","on","this","push","off","index","indexOf","splice","emit","args","forEach","error","removeAllListeners","EventBus","GAME_EVENTS","GAME_READY","GAME_DESTROYED","SCENE_READY","PLAYER_JUMPED","BOX_HIT","CONTENT_TRIGGER","BUTTON_PRESSED","ASSETS_LOADED","LOADING_PROGRESS","PreloadScene","Phaser","Scene","loadingText","progressText","super","preload","createLoadingScreen","loadAssets","setupLoadingEvents","width","height","cameras","main","setBackgroundColor","text","fontSize","color","fontFamily","setOrigin","time","addEvent","delay","currentText","endsWith","setText","loop","load","atlas","file","src","includes","image","progress","percent","Math","round","delayedCall","scene","start","create","MainScene","player","platforms","contentBoxes","cursors","wasd","isGrounded","setupWorld","createPlatforms","createPlayer","createContentBoxes","setupControls","setupCollisions","setupAnimations","physics","world","setBounds","staticGroup","groundY","GAME_CONSTANTS","WORLD","GROUND_LEVEL","groundTiles","ceil","BOUNDS","groundTile","rectangle","platform1","platform2","sprite","setCollideWorldBounds","setSize","PLAYER","SIZE","setDisplaySize","group","resumeBox","BOXES","POSITIONS","RESUME","x","y","setData","setTint","portfolioBox","PORTFOLIO","contactBox","CONTACT","addMultiple","entries","box","setGravityY","input","keyboard","createCursorKeys","W","addKey","Input","Keyboard","KeyCodes","A","S","D","SPACE","handleJump","collider","overlap","_player","handleBoxHit","anims","exists","frames","frame","frameRate","ANIMATIONS","FRAME_RATE","repeat","update","handlePlayerMovement","updateAnimations","checkGrounded","speed","SPEED","left","isDown","setVelocityX","setFlipX","right","currentVelocityX","velocity","friction","GROUND_FRICTION","AIR_FRICTION","abs","newVelocityX","max","min","up","setVelocityY","JUMP_VELOCITY","play","getData","tweens","targets","duration","yoyo","ease","type","destroy","gameConfig","AUTO","parent","backgroundColor","arcade","gravity","debug","render","pixelArt","antialias","roundPixels","scale","mode","Scale","FIT","autoCenter","CENTER_BOTH","gamepad","audio","disableWebAudio","banner","hidePhaser","currentActiveScene","gameRef","phaserGameRef","loadingProgress","setLoadingProgress","isGameReady","setIsGameReady","showMobileInstructions","setShowMobileInstructions","isMobileDevice","test","userAgent","innerWidth","useEffect","Game","handleGameReady","handleSceneReady","handleContentTrigger","handleLoadingProgress","currentScene","getScene","touchAction","rect","getBoundingClientRect","touch","touches","clientX","clientY","top","rightZone","jumpZone","role","tabIndex"],"ignoreList":[],"sources":["../../src/components/GameBoy/GameBoyScreen.tsx","../../src/utils/accessibility.ts","../../src/components/GameBoy/GameBoyButtons.tsx","../../src/components/GameBoy/GameBoyShell.tsx","../../src/components/Game/EventBus.ts","../../src/components/Game/scenes/PreloadScene.ts","../../src/components/Game/scenes/MainScene.ts","../../src/utils/gameConfig.ts","../../src/components/Game/PhaserGame.tsx"],"sourcesContent":["import React, { Suspense } from 'react'\n\n// Lazy load the PhaserGame component to reduce initial bundle size\nconst PhaserGame = React.lazy(() => \n  import('../Game/PhaserGame').then(module => ({ default: module.default }))\n)\n\ninterface GameBoyScreenProps {\n  className?: string\n  onContentTrigger?: (contentType: string) => void\n}\n\nconst GameBoyScreen: React.FC<GameBoyScreenProps> = ({ \n  className = '',\n  onContentTrigger \n}) => {\n  return (\n    <div className={`gameboy-screen ${className}`}>\n      {/* Screen bezel */}\n      <div className=\"bg-gameboy-darkest p-1 rounded\">\n        {/* Actual screen area - contains the Phaser game */}\n        <div \n          className=\"w-64 h-48 bg-gameboy-screen rounded relative overflow-hidden\"\n          style={{ \n            imageRendering: 'pixelated'\n          }}\n        >\n          <Suspense fallback={\n            <div className=\"w-full h-full bg-gameboy-screen flex items-center justify-center\">\n              <div className=\"text-gameboy-darkest font-gameboy text-center\">\n                <div className=\"text-sm mb-2\">MARIO</div>\n                <div className=\"text-xs\">Loading game...</div>\n                <div className=\"flex justify-center space-x-1 mt-2\">\n                  <div className=\"w-1 h-1 bg-gameboy-darkest rounded-full animate-bounce\"></div>\n                  <div className=\"w-1 h-1 bg-gameboy-darkest rounded-full animate-bounce\" style={{ animationDelay: '0.1s' }}></div>\n                  <div className=\"w-1 h-1 bg-gameboy-darkest rounded-full animate-bounce\" style={{ animationDelay: '0.2s' }}></div>\n                </div>\n              </div>\n            </div>\n          }>\n            <PhaserGame\n              onContentTrigger={onContentTrigger}\n              className=\"w-full h-full\"\n            />\n          </Suspense>\n\n          {/* Screen shine effect */}\n          <div className=\"absolute inset-0 bg-gradient-to-br from-transparent via-transparent to-gameboy-dark opacity-10 pointer-events-none rounded\"></div>\n        </div>\n      </div>\n\n      {/* Screen details below */}\n      <div className=\"flex justify-between mt-2 px-2\">\n        <div className=\"text-xs font-gameboy text-gameboy-dark\">BATTERY</div>\n        <div className=\"flex items-center space-x-1\">\n          <div className=\"w-1 h-1 bg-gameboy-light rounded-full\"></div>\n          <div className=\"text-xs font-gameboy text-gameboy-dark\">ON</div>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default GameBoyScreen","/**\n * Accessibility utilities and enhancements\n * Provides screen reader support, keyboard navigation, and ARIA features\n */\n\n// Announce content changes to screen readers\nexport const announceToScreenReader = (message: string, priority: 'polite' | 'assertive' = 'polite') => {\n  const announcement = document.createElement('div')\n  announcement.setAttribute('aria-live', priority)\n  announcement.setAttribute('aria-atomic', 'true')\n  announcement.className = 'sr-only'\n  announcement.textContent = message\n  \n  document.body.appendChild(announcement)\n  \n  // Remove after announcement\n  setTimeout(() => {\n    document.body.removeChild(announcement)\n  }, 1000)\n}\n\n// Enhanced focus management\nexport const manageFocus = {\n  // Store the previously focused element\n  previousFocus: null as HTMLElement | null,\n  \n  // Set focus to an element\n  setFocus: (element: HTMLElement | null) => {\n    if (element) {\n      element.focus()\n    }\n  },\n  \n  // Store current focus and set new focus\n  trapFocus: (element: HTMLElement) => {\n    manageFocus.previousFocus = document.activeElement as HTMLElement\n    element.focus()\n  },\n  \n  // Return focus to previously focused element\n  returnFocus: () => {\n    if (manageFocus.previousFocus) {\n      manageFocus.previousFocus.focus()\n      manageFocus.previousFocus = null\n    }\n  }\n}\n\n// Game accessibility announcements\nexport const gameAccessibility = {\n  announceGameStart: () => {\n    announceToScreenReader('Mario game loaded. Use arrow keys or WASD to move, spacebar or A button to jump. Hit colored boxes to navigate to different sections.', 'assertive')\n  },\n  \n  announceMovement: (direction: string) => {\n    announceToScreenReader(`Mario moved ${direction}`, 'polite')\n  },\n  \n  announceJump: () => {\n    announceToScreenReader('Mario jumped', 'polite')\n  },\n  \n  announceBoxHit: (contentType: string) => {\n    const messages = {\n      'resume': 'Navigating to Resume section',\n      'portfolio': 'Navigating to Portfolio section', \n      'contact': 'Navigating to Contact section'\n    }\n    announceToScreenReader(messages[contentType as keyof typeof messages] || `Hit ${contentType} box`, 'assertive')\n  },\n  \n  announceContentLoad: (contentType: string) => {\n    const messages = {\n      'resume': 'Resume page loaded',\n      'portfolio': 'Portfolio page loaded',\n      'contact': 'Contact page loaded',\n      'home': 'Home page with Mario game loaded'\n    }\n    announceToScreenReader(messages[contentType as keyof typeof messages] || `${contentType} page loaded`, 'assertive')\n  }\n}\n\n// Keyboard navigation helpers\nexport const keyboardNavigation = {\n  // Handle keyboard events for game controls\n  handleGameKeyboard: (event: KeyboardEvent) => {\n    const { key } = event\n    \n    // Announce movement for screen readers\n    switch (key.toLowerCase()) {\n      case 'arrowleft':\n      case 'a':\n        gameAccessibility.announceMovement('left')\n        break\n      case 'arrowright': \n      case 'd':\n        gameAccessibility.announceMovement('right')\n        break\n      case 'arrowup':\n      case 'w':\n      case ' ':\n        gameAccessibility.announceJump()\n        break\n    }\n  },\n  \n  // Enhanced button keyboard handling\n  handleButtonKeyboard: (event: KeyboardEvent, callback: () => void) => {\n    if (event.key === 'Enter' || event.key === ' ') {\n      event.preventDefault()\n      callback()\n    }\n  }\n}\n\n// Color contrast checker (for development)\nexport const checkColorContrast = () => {\n  if (process.env.NODE_ENV !== 'development') return\n  \n  // Basic contrast checking - in a real app you'd use a proper contrast checker\n  console.log('Color Contrast Check:')\n  console.log('GameBoy colors designed with high contrast ratios:')\n  console.log('- Dark text on light backgrounds: High contrast')\n  console.log('- Light text on dark backgrounds: High contrast')\n  console.log('- Button states have clear visual differences')\n}\n\n// Initialize accessibility features\nexport const initAccessibility = () => {\n  // Add skip link styles\n  const skipLinkStyles = `\n    .skip-link {\n      position: absolute;\n      top: -40px;\n      left: 6px;\n      background: #000;\n      color: #fff;\n      padding: 8px;\n      text-decoration: none;\n      border-radius: 4px;\n      z-index: 1000;\n      font-family: inherit;\n    }\n    .skip-link:focus {\n      top: 6px;\n    }\n    .sr-only {\n      position: absolute;\n      width: 1px;\n      height: 1px;\n      padding: 0;\n      margin: -1px;\n      overflow: hidden;\n      clip: rect(0, 0, 0, 0);\n      white-space: nowrap;\n      border: 0;\n    }\n  `\n  \n  // Add styles if they don't exist\n  if (!document.querySelector('#accessibility-styles')) {\n    const style = document.createElement('style')\n    style.id = 'accessibility-styles'\n    style.textContent = skipLinkStyles\n    document.head.appendChild(style)\n  }\n  \n  // Check color contrast in development\n  checkColorContrast()\n}\n\n// High contrast mode detection and support\nexport const highContrastSupport = {\n  // Detect if user prefers high contrast\n  prefersHighContrast: () => {\n    return window.matchMedia('(prefers-contrast: high)').matches\n  },\n  \n  // Apply high contrast styles if needed\n  applyHighContrast: () => {\n    if (highContrastSupport.prefersHighContrast()) {\n      document.body.classList.add('high-contrast-mode')\n    }\n  }\n}\n\n// Reduced motion support\nexport const reducedMotionSupport = {\n  // Detect if user prefers reduced motion\n  prefersReducedMotion: () => {\n    return window.matchMedia('(prefers-reduced-motion: reduce)').matches\n  },\n  \n  // Apply reduced motion styles\n  applyReducedMotion: () => {\n    if (reducedMotionSupport.prefersReducedMotion()) {\n      document.body.classList.add('reduced-motion')\n    }\n  }\n}","import React, { useState } from 'react'\nimport { keyboardNavigation } from '../../utils/accessibility'\n\ninterface GameBoyButtonsProps {\n  onButtonPress?: (button: string) => void\n  className?: string\n}\n\nconst GameBoyButtons: React.FC<GameBoyButtonsProps> = ({ \n  onButtonPress,\n  className = '' \n}) => {\n  const [pressedButton, setPressedButton] = useState<string | null>(null)\n\n  const handleButtonPress = (button: string) => {\n    setPressedButton(button)\n    onButtonPress?.(button)\n    \n    // Haptic feedback for mobile devices\n    if ('vibrate' in navigator) {\n      navigator.vibrate(50)\n    }\n    \n    // Visual feedback\n    setTimeout(() => {\n      setPressedButton(null)\n    }, 150)\n  }\n\n  const handleTouchStart = (e: React.TouchEvent, button: string) => {\n    e.preventDefault() // Prevent scrolling and other touch behaviors\n    handleButtonPress(button)\n  }\n\n  const handleKeyDown = (event: React.KeyboardEvent, button: string) => {\n    keyboardNavigation.handleButtonKeyboard(event.nativeEvent, () => {\n      handleButtonPress(button)\n    })\n  }\n\n  return (\n    <div className={`gameboy-buttons ${className}`}>\n      {/* D-Pad and Action Buttons Container */}\n      <div className=\"flex justify-between items-center\">\n        {/* Left side - D-Pad */}\n        <div className=\"relative\">\n          <div className=\"text-xs font-gameboy text-gameboy-dark mb-2 text-center\">D-PAD</div>\n          \n          {/* D-Pad */}\n          <div className=\"relative w-16 h-16\">\n            {/* Horizontal bar */}\n            <div className=\"absolute top-1/2 left-0 w-full h-4 bg-gameboy-buttons rounded transform -translate-y-1/2 shadow-inner\"></div>\n            \n            {/* Vertical bar */}\n            <div className=\"absolute left-1/2 top-0 w-4 h-full bg-gameboy-buttons rounded transform -translate-x-1/2 shadow-inner\"></div>\n            \n            {/* Direction buttons */}\n            <button\n              className={`absolute top-0 left-1/2 w-5 h-7 sm:w-4 sm:h-6 transform -translate-x-1/2 bg-gameboy-buttons hover:bg-gameboy-dark active:bg-gameboy-dark transition-colors focus:outline-none focus:ring-2 focus:ring-gameboy-light rounded-t touch-manipulation ${\n                pressedButton === 'up' ? 'bg-gameboy-dark' : ''\n              }`}\n              onClick={() => handleButtonPress('up')}\n              onTouchStart={(e) => handleTouchStart(e, 'up')}\n              onKeyDown={(e) => handleKeyDown(e, 'up')}\n              aria-label=\"D-Pad Up\"\n            />\n            \n            <button\n              className={`absolute bottom-0 left-1/2 w-5 h-7 sm:w-4 sm:h-6 transform -translate-x-1/2 bg-gameboy-buttons hover:bg-gameboy-dark active:bg-gameboy-dark transition-colors focus:outline-none focus:ring-2 focus:ring-gameboy-light rounded-b touch-manipulation ${\n                pressedButton === 'down' ? 'bg-gameboy-dark' : ''\n              }`}\n              onClick={() => handleButtonPress('down')}\n              onTouchStart={(e) => handleTouchStart(e, 'down')}\n              onKeyDown={(e) => handleKeyDown(e, 'down')}\n              aria-label=\"D-Pad Down\"\n            />\n            \n            <button\n              className={`absolute left-0 top-1/2 w-7 h-5 sm:w-6 sm:h-4 transform -translate-y-1/2 bg-gameboy-buttons hover:bg-gameboy-dark active:bg-gameboy-dark transition-colors focus:outline-none focus:ring-2 focus:ring-gameboy-light rounded-l touch-manipulation ${\n                pressedButton === 'left' ? 'bg-gameboy-dark' : ''\n              }`}\n              onClick={() => handleButtonPress('left')}\n              onTouchStart={(e) => handleTouchStart(e, 'left')}\n              onKeyDown={(e) => handleKeyDown(e, 'left')}\n              aria-label=\"D-Pad Left\"\n            />\n            \n            <button\n              className={`absolute right-0 top-1/2 w-7 h-5 sm:w-6 sm:h-4 transform -translate-y-1/2 bg-gameboy-buttons hover:bg-gameboy-dark active:bg-gameboy-dark transition-colors focus:outline-none focus:ring-2 focus:ring-gameboy-light rounded-r touch-manipulation ${\n                pressedButton === 'right' ? 'bg-gameboy-dark' : ''\n              }`}\n              onClick={() => handleButtonPress('right')}\n              onTouchStart={(e) => handleTouchStart(e, 'right')}\n              onKeyDown={(e) => handleKeyDown(e, 'right')}\n              aria-label=\"D-Pad Right\"\n            />\n          </div>\n        </div>\n\n        {/* Right side - Action Buttons */}\n        <div>\n          <div className=\"flex flex-col space-y-2\">\n            {/* B and A buttons */}\n            <div className=\"flex space-x-3 justify-end\">\n              <div className=\"text-center\">\n                <button\n                  className={`w-10 h-10 sm:w-8 sm:h-8 bg-gameboy-buttons hover:bg-gameboy-dark active:bg-gameboy-dark rounded-full shadow-inner transition-colors focus:outline-none focus:ring-2 focus:ring-gameboy-light touch-manipulation ${\n                    pressedButton === 'B' ? 'bg-gameboy-dark' : ''\n                  }`}\n                  onClick={() => handleButtonPress('B')}\n                  onTouchStart={(e) => handleTouchStart(e, 'B')}\n                  onKeyDown={(e) => handleKeyDown(e, 'B')}\n                  aria-label=\"B Button\"\n                />\n                <div className=\"text-xs font-gameboy text-gameboy-dark mt-1\">B</div>\n              </div>\n              \n              <div className=\"text-center\">\n                <button\n                  className={`w-10 h-10 sm:w-8 sm:h-8 bg-gameboy-buttons hover:bg-gameboy-dark active:bg-gameboy-dark rounded-full shadow-inner transition-colors focus:outline-none focus:ring-2 focus:ring-gameboy-light touch-manipulation ${\n                    pressedButton === 'A' ? 'bg-gameboy-dark' : ''\n                  }`}\n                  onClick={() => handleButtonPress('A')}\n                  onTouchStart={(e) => handleTouchStart(e, 'A')}\n                  onKeyDown={(e) => handleKeyDown(e, 'A')}\n                  aria-label=\"A Button\"\n                />\n                <div className=\"text-xs font-gameboy text-gameboy-dark mt-1\">A</div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Bottom buttons - Select and Start */}\n      <div className=\"flex justify-center space-x-6 mt-6\">\n        <div className=\"text-center\">\n          <button\n            className={`w-14 h-4 sm:w-12 sm:h-3 bg-gameboy-buttons hover:bg-gameboy-dark active:bg-gameboy-dark rounded-full shadow-inner transition-colors focus:outline-none focus:ring-2 focus:ring-gameboy-light touch-manipulation ${\n              pressedButton === 'SELECT' ? 'bg-gameboy-dark' : ''\n            }`}\n            onClick={() => handleButtonPress('SELECT')}\n            onTouchStart={(e) => handleTouchStart(e, 'SELECT')}\n            onKeyDown={(e) => handleKeyDown(e, 'SELECT')}\n            aria-label=\"Select Button\"\n          />\n          <div className=\"text-xs font-gameboy text-gameboy-dark mt-1\">SELECT</div>\n        </div>\n        \n        <div className=\"text-center\">\n          <button\n            className={`w-14 h-4 sm:w-12 sm:h-3 bg-gameboy-buttons hover:bg-gameboy-dark active:bg-gameboy-dark rounded-full shadow-inner transition-colors focus:outline-none focus:ring-2 focus:ring-gameboy-light touch-manipulation ${\n              pressedButton === 'START' ? 'bg-gameboy-dark' : ''\n            }`}\n            onClick={() => handleButtonPress('START')}\n            onTouchStart={(e) => handleTouchStart(e, 'START')}\n            onKeyDown={(e) => handleKeyDown(e, 'START')}\n            aria-label=\"Start Button\"\n          />\n          <div className=\"text-xs font-gameboy text-gameboy-dark mt-1\">START</div>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default GameBoyButtons","import React, { useRef } from 'react'\nimport GameBoyScreen from './GameBoyScreen'\nimport GameBoyButtons from './GameBoyButtons'\n\ninterface GameBoyShellProps {\n  className?: string\n  onContentTrigger?: (contentType: string) => void\n}\n\nconst GameBoyShell: React.FC<GameBoyShellProps> = ({ \n  className = '',\n  onContentTrigger \n}) => {\n  const screenRef = useRef<HTMLDivElement>(null)\n  \n  const handleButtonPress = (button: string) => {\n    // Find the Phaser game component and send the button press\n    const gameContainer = screenRef.current?.querySelector('#phaser-game-container')\n    if (gameContainer && (gameContainer as any).handleButtonPress) {\n      (gameContainer as any).handleButtonPress(button)\n    }\n  }\n  \n  return (\n    <div className={`gameboy-shell ${className}`}>\n      {/* Main GameBoy body */}\n      <div className=\"relative w-full max-w-sm sm:w-80 bg-gameboy-shell border-4 border-gameboy-buttons rounded-3xl shadow-2xl p-4 sm:p-6 mx-auto\">\n        {/* Top section with brand text */}\n        <div className=\"text-center mb-4\">\n          <div className=\"text-xs font-gameboy text-gameboy-dark mb-1\">GAME BOY</div>\n          <div className=\"w-16 h-4 bg-gameboy-buttons rounded-full mx-auto mb-2\">\n            <div className=\"w-12 h-2 bg-gameboy-dark rounded-full mx-auto translate-y-1\"></div>\n          </div>\n        </div>\n\n        {/* Screen section */}\n        <div ref={screenRef} className=\"mb-6\">\n          <div className=\"bg-gameboy-dark p-4 rounded-lg\">\n            <GameBoyScreen onContentTrigger={onContentTrigger} />\n          </div>\n          \n          {/* Screen label */}\n          <div className=\"text-center mt-2\">\n            <div className=\"text-xs font-gameboy text-gameboy-dark\">DOT MATRIX WITH STEREO SOUND</div>\n          </div>\n        </div>\n\n        {/* Controls section */}\n        <GameBoyButtons onButtonPress={handleButtonPress} />\n\n        {/* Bottom section with Nintendo branding */}\n        <div className=\"text-center mt-4\">\n          <div className=\"text-xs font-gameboy text-gameboy-dark\">Nintendo</div>\n        </div>\n\n        {/* Speaker holes */}\n        <div className=\"absolute top-4 right-6\">\n          <div className=\"grid grid-cols-6 gap-1\">\n            {Array.from({ length: 36 }, (_, i) => (\n              <div\n                key={i}\n                className=\"w-1 h-1 bg-gameboy-dark rounded-full\"\n              />\n            ))}\n          </div>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default GameBoyShell","/**\n * EventBus for communication between React and Phaser\n * Simple browser-compatible event system\n */\nclass GameEventBus {\n  private static instance: GameEventBus\n  private events: { [key: string]: Array<(...args: any[]) => void> } = {}\n\n  private constructor() {}\n\n  public static getInstance(): GameEventBus {\n    if (!GameEventBus.instance) {\n      GameEventBus.instance = new GameEventBus()\n    }\n    return GameEventBus.instance\n  }\n\n  public on(event: string, callback: (...args: any[]) => void) {\n    if (!this.events[event]) {\n      this.events[event] = []\n    }\n    this.events[event].push(callback)\n  }\n\n  public off(event: string, callback: (...args: any[]) => void) {\n    if (!this.events[event]) return\n    \n    const index = this.events[event].indexOf(callback)\n    if (index > -1) {\n      this.events[event].splice(index, 1)\n    }\n  }\n\n  public emit(event: string, ...args: any[]) {\n    if (!this.events[event]) return\n    \n    this.events[event].forEach(callback => {\n      try {\n        callback(...args)\n      } catch (error) {\n        console.error(`EventBus error on ${event}:`, error)\n      }\n    })\n  }\n\n  public removeAllListeners(event?: string) {\n    if (event) {\n      delete this.events[event]\n    } else {\n      this.events = {}\n    }\n  }\n\n  // Game lifecycle events\n  public static readonly GAME_READY = 'game-ready'\n  public static readonly GAME_DESTROYED = 'game-destroyed'\n  public static readonly SCENE_READY = 'scene-ready'\n\n  // Player events\n  public static readonly PLAYER_MOVED = 'player-moved'\n  public static readonly PLAYER_JUMPED = 'player-jumped'\n\n  // Interaction events\n  public static readonly BOX_HIT = 'box-hit'\n  public static readonly CONTENT_TRIGGER = 'content-trigger'\n\n  // UI events\n  public static readonly BUTTON_PRESSED = 'button-pressed'\n  public static readonly SHOW_CONTENT = 'show-content'\n  public static readonly HIDE_CONTENT = 'hide-content'\n\n  // Asset loading events\n  public static readonly ASSETS_LOADING = 'assets-loading'\n  public static readonly ASSETS_LOADED = 'assets-loaded'\n  public static readonly LOADING_PROGRESS = 'loading-progress'\n\n  // Game state events\n  public static readonly GAME_STARTED = 'game-started'\n  public static readonly GAME_PAUSED = 'game-paused'\n  public static readonly GAME_RESUMED = 'game-resumed'\n}\n\n// Export singleton instance\nconst EventBus = GameEventBus.getInstance()\nexport default EventBus\n\n// Export event constants for easy importing\nexport const GAME_EVENTS = {\n  GAME_READY: GameEventBus.GAME_READY,\n  GAME_DESTROYED: GameEventBus.GAME_DESTROYED,\n  SCENE_READY: GameEventBus.SCENE_READY,\n  PLAYER_MOVED: GameEventBus.PLAYER_MOVED,\n  PLAYER_JUMPED: GameEventBus.PLAYER_JUMPED,\n  BOX_HIT: GameEventBus.BOX_HIT,\n  CONTENT_TRIGGER: GameEventBus.CONTENT_TRIGGER,\n  BUTTON_PRESSED: GameEventBus.BUTTON_PRESSED,\n  SHOW_CONTENT: GameEventBus.SHOW_CONTENT,\n  HIDE_CONTENT: GameEventBus.HIDE_CONTENT,\n  ASSETS_LOADING: GameEventBus.ASSETS_LOADING,\n  ASSETS_LOADED: GameEventBus.ASSETS_LOADED,\n  LOADING_PROGRESS: GameEventBus.LOADING_PROGRESS,\n  GAME_STARTED: GameEventBus.GAME_STARTED,\n  GAME_PAUSED: GameEventBus.GAME_PAUSED,\n  GAME_RESUMED: GameEventBus.GAME_RESUMED,\n} as const","import Phaser from 'phaser'\nimport EventBus, { GAME_EVENTS } from '../EventBus'\n\n/**\n * PreloadScene - Handles asset loading for the Mario GameBoy game\n * Shows loading progress and transitions to main game scene\n */\nexport default class PreloadScene extends Phaser.Scene {\n  private loadingText!: Phaser.GameObjects.Text\n  private progressText!: Phaser.GameObjects.Text\n\n  constructor() {\n    super({ key: 'PreloadScene' })\n  }\n\n  preload() {\n    this.createLoadingScreen()\n    this.loadAssets()\n    this.setupLoadingEvents()\n  }\n\n  private createLoadingScreen() {\n    const { width, height } = this.cameras.main\n    \n    // GameBoy screen background\n    this.cameras.main.setBackgroundColor('#c7d32c')\n    \n    // Loading text\n    this.loadingText = this.add.text(width / 2, height / 2 - 20, 'MARIO', {\n      fontSize: '16px',\n      color: '#0f380f',\n      fontFamily: 'monospace'\n    }).setOrigin(0.5)\n    \n    // Progress text\n    this.progressText = this.add.text(width / 2, height / 2 + 10, 'Loading... 0%', {\n      fontSize: '8px',\n      color: '#0f380f',\n      fontFamily: 'monospace'\n    }).setOrigin(0.5)\n    \n    // Simple loading animation - blinking dots\n    this.time.addEvent({\n      delay: 500,\n      callback: () => {\n        const currentText = this.loadingText.text\n        if (currentText.endsWith('...')) {\n          this.loadingText.setText('MARIO')\n        } else {\n          this.loadingText.setText(currentText + '.')\n        }\n      },\n      loop: true\n    })\n  }\n\n  private loadAssets() {\n    // Mario sprite atlas\n    this.load.atlas(\n      'mario-atlas', \n      '/assets/sprites/mario-atlas.svg', \n      '/assets/sprites/mario-atlas.json'\n    )\n    \n    // Fallback: Try PNG version if SVG doesn't work\n    this.load.on('loaderror', (file: any) => {\n      if (file.key === 'mario-atlas' && file.src.includes('.svg')) {\n        console.log('SVG atlas failed, trying PNG fallback...')\n        // In a real implementation, you'd have a PNG version\n      }\n    })\n\n    // Background tiles (if needed for level design)\n    this.load.image('ground-tile', '/assets/sprites/mario-atlas.svg')\n    \n    // Audio assets (placeholder - would load actual Mario sounds)\n    // this.load.audio('jump', '/assets/audio/jump.mp3')\n    // this.load.audio('coin', '/assets/audio/coin.mp3')\n  }\n\n  private setupLoadingEvents() {\n    // Update loading progress\n    this.load.on('progress', (progress: number) => {\n      const percent = Math.round(progress * 100)\n      this.progressText.setText(`Loading... ${percent}%`)\n      \n      // Emit progress event to React\n      EventBus.emit(GAME_EVENTS.LOADING_PROGRESS, percent)\n    })\n\n    // Asset loading complete\n    this.load.on('complete', () => {\n      this.progressText.setText('Ready!')\n      EventBus.emit(GAME_EVENTS.ASSETS_LOADED)\n      \n      // Transition to main scene after brief delay\n      this.time.delayedCall(500, () => {\n        this.scene.start('MainScene')\n      })\n    })\n  }\n\n  create() {\n    // Scene is ready\n    console.log('PreloadScene created')\n  }\n}","import Phaser from 'phaser'\nimport EventBus, { GAME_EVENTS } from '../EventBus'\nimport { GAME_CONSTANTS } from '../../../utils/gameConfig'\n\n/**\n * MainScene - The main Mario platformer gameplay scene\n * Handles player movement, collision detection, and content box interactions\n */\nexport default class MainScene extends Phaser.Scene {\n  private player!: Phaser.Physics.Arcade.Sprite\n  private platforms!: Phaser.Physics.Arcade.StaticGroup\n  private contentBoxes!: Phaser.Physics.Arcade.Group\n  private cursors!: Phaser.Types.Input.Keyboard.CursorKeys\n  private wasd!: { [key: string]: Phaser.Input.Keyboard.Key }\n  private isGrounded = false\n\n  constructor() {\n    super({ key: 'MainScene' })\n  }\n\n  create() {\n    this.setupWorld()\n    this.createPlatforms()\n    this.createPlayer()\n    this.createContentBoxes()\n    this.setupControls()\n    this.setupCollisions()\n    this.setupAnimations()\n    \n    // Notify React that the game is ready\n    EventBus.emit(GAME_EVENTS.SCENE_READY, this)\n    EventBus.emit(GAME_EVENTS.GAME_READY)\n    \n    console.log('MainScene created and ready')\n  }\n\n  private setupWorld() {\n    const { width, height } = this.cameras.main\n    \n    // Set world bounds\n    this.physics.world.setBounds(0, 0, width, height)\n    \n    // GameBoy screen background\n    this.cameras.main.setBackgroundColor('#c7d32c')\n  }\n\n  private createPlatforms() {\n    // Create ground platform\n    this.platforms = this.physics.add.staticGroup()\n    \n    // Main ground platform\n    const groundY = GAME_CONSTANTS.WORLD.GROUND_LEVEL\n    const groundTiles = Math.ceil(GAME_CONSTANTS.WORLD.BOUNDS.width / 16)\n    \n    for (let i = 0; i < groundTiles; i++) {\n      const groundTile = this.add.rectangle(\n        i * 16 + 8, \n        groundY + 8, \n        16, \n        16, \n        0x8b4513 // Brown color for ground\n      )\n      this.platforms.add(groundTile)\n    }\n    \n    // Add some floating platforms for variety\n    const platform1 = this.add.rectangle(64, 120, 48, 16, 0x8b4513)\n    const platform2 = this.add.rectangle(192, 100, 48, 16, 0x8b4513)\n    this.platforms.add(platform1)\n    this.platforms.add(platform2)\n  }\n\n  private createPlayer() {\n    // Create Mario player sprite\n    this.player = this.physics.add.sprite(32, 100, 'mario-atlas', 'mario-idle')\n    \n    // Set player properties\n    this.player.setCollideWorldBounds(true)\n    this.player.setSize(GAME_CONSTANTS.PLAYER.SIZE.width, GAME_CONSTANTS.PLAYER.SIZE.height)\n    this.player.setDisplaySize(16, 16)\n    \n    // Player physics - use global gravity (no need to set individual gravity)\n  }\n\n  private createContentBoxes() {\n    this.contentBoxes = this.physics.add.group()\n    \n    // Resume box\n    const resumeBox = this.physics.add.sprite(\n      GAME_CONSTANTS.BOXES.POSITIONS.RESUME.x,\n      GAME_CONSTANTS.BOXES.POSITIONS.RESUME.y,\n      'mario-atlas',\n      'box-resume'\n    )\n    resumeBox.setData('content', 'resume')\n    resumeBox.setSize(GAME_CONSTANTS.BOXES.SIZE.width, GAME_CONSTANTS.BOXES.SIZE.height)\n    resumeBox.setDisplaySize(24, 24) // Slightly smaller display size\n    resumeBox.setTint(0xffd700) // Golden color\n    \n    // Portfolio box\n    const portfolioBox = this.physics.add.sprite(\n      GAME_CONSTANTS.BOXES.POSITIONS.PORTFOLIO.x,\n      GAME_CONSTANTS.BOXES.POSITIONS.PORTFOLIO.y,\n      'mario-atlas',\n      'box-portfolio'\n    )\n    portfolioBox.setData('content', 'portfolio')\n    portfolioBox.setSize(GAME_CONSTANTS.BOXES.SIZE.width, GAME_CONSTANTS.BOXES.SIZE.height)\n    portfolioBox.setDisplaySize(24, 24)\n    portfolioBox.setTint(0x00ff00) // Green color\n    \n    // Contact box\n    const contactBox = this.physics.add.sprite(\n      GAME_CONSTANTS.BOXES.POSITIONS.CONTACT.x,\n      GAME_CONSTANTS.BOXES.POSITIONS.CONTACT.y,\n      'mario-atlas',\n      'box-contact'\n    )\n    contactBox.setData('content', 'contact')\n    contactBox.setSize(GAME_CONSTANTS.BOXES.SIZE.width, GAME_CONSTANTS.BOXES.SIZE.height)\n    contactBox.setDisplaySize(24, 24)\n    contactBox.setTint(0x0080ff) // Blue color\n    \n    // Add boxes to group\n    this.contentBoxes.addMultiple([resumeBox, portfolioBox, contactBox])\n    \n    // Make boxes static (don't fall with gravity)\n    this.contentBoxes.children.entries.forEach((box: any) => {\n      if (box.body && 'setGravityY' in box.body) {\n        box.body.setGravityY(-GAME_CONSTANTS.WORLD.GRAVITY) // Cancel out gravity\n      }\n    })\n  }\n\n  private setupControls() {\n    // Arrow keys\n    this.cursors = this.input.keyboard!.createCursorKeys()\n    \n    // WASD keys\n    this.wasd = {\n      'W': this.input.keyboard!.addKey(Phaser.Input.Keyboard.KeyCodes.W),\n      'A': this.input.keyboard!.addKey(Phaser.Input.Keyboard.KeyCodes.A),\n      'S': this.input.keyboard!.addKey(Phaser.Input.Keyboard.KeyCodes.S),\n      'D': this.input.keyboard!.addKey(Phaser.Input.Keyboard.KeyCodes.D),\n    }\n    \n    // Space for jump\n    const spaceKey = this.input.keyboard!.addKey(Phaser.Input.Keyboard.KeyCodes.SPACE)\n    spaceKey.on('down', () => {\n      this.handleJump()\n    })\n  }\n\n  private setupCollisions() {\n    // Player vs platforms\n    this.physics.add.collider(this.player, this.platforms, () => {\n      this.isGrounded = true\n    })\n    \n    // Player vs content boxes\n    this.physics.add.overlap(this.player, this.contentBoxes, (_player, box) => {\n      this.handleBoxHit(box as Phaser.Physics.Arcade.Sprite)\n    })\n    \n    // Content boxes vs platforms (so they don't fall through)\n    this.physics.add.collider(this.contentBoxes, this.platforms)\n  }\n\n  private setupAnimations() {\n    // Create walking animation\n    if (!this.anims.exists('mario-walk')) {\n      this.anims.create({\n        key: 'mario-walk',\n        frames: [\n          { key: 'mario-atlas', frame: 'mario-walk-1' },\n          { key: 'mario-atlas', frame: 'mario-walk-2' }\n        ],\n        frameRate: GAME_CONSTANTS.ANIMATIONS.FRAME_RATE,\n        repeat: -1\n      })\n    }\n    \n    // Create idle animation\n    if (!this.anims.exists('mario-idle')) {\n      this.anims.create({\n        key: 'mario-idle',\n        frames: [{ key: 'mario-atlas', frame: 'mario-idle' }],\n        frameRate: 1\n      })\n    }\n    \n    // Create jump animation\n    if (!this.anims.exists('mario-jump')) {\n      this.anims.create({\n        key: 'mario-jump',\n        frames: [{ key: 'mario-atlas', frame: 'mario-jump' }],\n        frameRate: 1\n      })\n    }\n  }\n\n  update() {\n    this.handlePlayerMovement()\n    this.updateAnimations()\n    this.checkGrounded()\n  }\n\n  private handlePlayerMovement() {\n    const speed = GAME_CONSTANTS.PLAYER.SPEED\n    \n    // Horizontal movement\n    if (this.cursors.left.isDown || this.wasd.A.isDown) {\n      this.player.setVelocityX(-speed)\n      this.player.setFlipX(true)\n    } else if (this.cursors.right.isDown || this.wasd.D.isDown) {\n      this.player.setVelocityX(speed)\n      this.player.setFlipX(false)\n    } else {\n      // Apply friction\n      const currentVelocityX = this.player.body!.velocity.x\n      const friction = this.isGrounded ? \n        GAME_CONSTANTS.PLAYER.GROUND_FRICTION : \n        GAME_CONSTANTS.PLAYER.AIR_FRICTION\n      \n      if (Math.abs(currentVelocityX) < 10) {\n        this.player.setVelocityX(0)\n      } else {\n        const newVelocityX = currentVelocityX > 0 ? \n          Math.max(0, currentVelocityX - friction * (1/60)) :\n          Math.min(0, currentVelocityX + friction * (1/60))\n        this.player.setVelocityX(newVelocityX)\n      }\n    }\n    \n    // Jumping (handled in setupControls)\n    if ((this.cursors.up.isDown || this.wasd.W.isDown) && this.isGrounded) {\n      this.handleJump()\n    }\n  }\n\n  private handleJump() {\n    if (this.isGrounded) {\n      this.player.setVelocityY(GAME_CONSTANTS.PLAYER.JUMP_VELOCITY)\n      this.isGrounded = false\n      EventBus.emit(GAME_EVENTS.PLAYER_JUMPED)\n    }\n  }\n\n  private updateAnimations() {\n    if (!this.isGrounded) {\n      // In air\n      this.player.play('mario-jump', true)\n    } else if (Math.abs(this.player.body!.velocity.x) > 10) {\n      // Moving\n      this.player.play('mario-walk', true)\n    } else {\n      // Idle\n      this.player.play('mario-idle', true)\n    }\n  }\n\n  private checkGrounded() {\n    // Reset grounded state, will be set to true by collision callback\n    this.isGrounded = false\n  }\n\n  private handleBoxHit(box: Phaser.Physics.Arcade.Sprite) {\n    const contentType = box.getData('content')\n    \n    // Visual feedback - make box bounce\n    this.tweens.add({\n      targets: box,\n      y: box.y - 10,\n      duration: 100,\n      yoyo: true,\n      ease: 'Power2'\n    })\n    \n    // Emit events to React\n    EventBus.emit(GAME_EVENTS.BOX_HIT, { type: contentType, box })\n    EventBus.emit(GAME_EVENTS.CONTENT_TRIGGER, contentType)\n    \n    console.log(`Player hit ${contentType} box!`)\n  }\n\n  // Called when scene is destroyed  \n  destroy() {\n    EventBus.emit(GAME_EVENTS.GAME_DESTROYED)\n  }\n}","import Phaser from 'phaser'\nimport PreloadScene from '../components/Game/scenes/PreloadScene'\nimport MainScene from '../components/Game/scenes/MainScene'\n\n/**\n * Phaser 3 Game Configuration\n * Optimized for GameBoy screen dimensions and Mario platformer mechanics\n */\nconst gameConfig: Phaser.Types.Core.GameConfig = {\n  type: Phaser.AUTO, // WebGL with Canvas fallback\n  width: 256, // GameBoy screen width\n  height: 192, // GameBoy screen height (adjusted for platformer)\n  parent: 'phaser-game-container', // Container div ID\n  backgroundColor: '#c7d32c', // GameBoy screen color\n  \n  // Physics configuration for Mario platformer\n  physics: {\n    default: 'arcade',\n    arcade: {\n      gravity: { x: 0, y: 800 }, // Mario-style gravity\n      debug: false, // Set to true for development debugging\n    },\n  },\n  \n  // Scene configuration\n  scene: [PreloadScene, MainScene],\n  \n  // Rendering configuration for pixel art\n  render: {\n    pixelArt: true,\n    antialias: false,\n    roundPixels: true,\n  },\n  \n  // Scale configuration for responsive design\n  scale: {\n    mode: Phaser.Scale.FIT,\n    autoCenter: Phaser.Scale.CENTER_BOTH,\n    parent: 'phaser-game-container',\n    width: 256,\n    height: 192,\n  },\n  \n  // Input configuration\n  input: {\n    keyboard: true,\n    gamepad: false, // Disable gamepad for now\n  },\n  \n  // Audio configuration\n  audio: {\n    disableWebAudio: false,\n  },\n  \n  // Banner configuration\n  banner: {\n    hidePhaser: true, // Hide Phaser banner in console\n  },\n}\n\nexport default gameConfig\n\n// Game constants for Mario platformer mechanics\nexport const GAME_CONSTANTS = {\n  PLAYER: {\n    SPEED: 160,\n    JUMP_VELOCITY: -500,\n    SIZE: { width: 16, height: 16 },\n    GROUND_FRICTION: 800,\n    AIR_FRICTION: 300,\n  },\n  \n  WORLD: {\n    GRAVITY: 800,\n    GROUND_LEVEL: 160,\n    BOUNDS: { width: 256, height: 192 },\n  },\n  \n  BOXES: {\n    SIZE: { width: 32, height: 32 },\n    BOUNCE_FORCE: -100,\n    POSITIONS: {\n      RESUME: { x: 80, y: 128 },\n      PORTFOLIO: { x: 128, y: 128 },\n      CONTACT: { x: 176, y: 128 },\n    },\n  },\n  \n  ANIMATIONS: {\n    FRAME_RATE: 8, // 8 FPS for retro feel\n    WALK_FRAMES: ['mario-idle', 'mario-walk-1', 'mario-walk-2'],\n    JUMP_FRAME: 'mario-jump',\n  },\n} as const","import React, { useEffect, useRef, useState } from 'react'\nimport Phaser from 'phaser'\nimport gameConfig from '../../utils/gameConfig'\nimport EventBus, { GAME_EVENTS } from './EventBus'\nimport { gameAccessibility, keyboardNavigation } from '../../utils/accessibility'\n\ninterface PhaserGameProps {\n  currentActiveScene?: (scene: Phaser.Scene) => void\n  onContentTrigger?: (contentType: string) => void\n  className?: string\n}\n\nconst PhaserGame: React.FC<PhaserGameProps> = ({ \n  currentActiveScene, \n  onContentTrigger,\n  className = '' \n}) => {\n  const gameRef = useRef<HTMLDivElement>(null)\n  const phaserGameRef = useRef<Phaser.Game | null>(null)\n  const [loadingProgress, setLoadingProgress] = useState(0)\n  const [isGameReady, setIsGameReady] = useState(false)\n  const [showMobileInstructions, setShowMobileInstructions] = useState(false)\n\n  // Detect if device is mobile/tablet\n  const isMobileDevice = /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent) || window.innerWidth <= 768\n\n  useEffect(() => {\n    // Initialize Phaser game\n    if (gameRef.current && !phaserGameRef.current) {\n      // Create the game instance\n      phaserGameRef.current = new Phaser.Game({\n        ...gameConfig,\n        parent: gameRef.current, // Mount to our div\n      })\n\n      // Setup event listeners\n      const handleGameReady = () => {\n        setIsGameReady(true)\n        console.log('Phaser game ready!')\n        \n        // Announce game ready for screen readers\n        gameAccessibility.announceGameStart()\n        \n        // Show mobile instructions on mobile devices\n        if (isMobileDevice) {\n          setShowMobileInstructions(true)\n          setTimeout(() => setShowMobileInstructions(false), 4000)\n        }\n      }\n\n      const handleSceneReady = (scene: Phaser.Scene) => {\n        currentActiveScene?.(scene)\n        console.log(`Scene ready: ${scene.scene.key}`)\n      }\n\n      const handleContentTrigger = (contentType: string) => {\n        onContentTrigger?.(contentType)\n        console.log(`Content triggered: ${contentType}`)\n        \n        // Announce navigation for screen readers\n        gameAccessibility.announceBoxHit(contentType)\n      }\n\n      const handleLoadingProgress = (progress: number) => {\n        setLoadingProgress(progress)\n      }\n\n      const handleBoxHit = ({ type }: { type: string; box: any }) => {\n        console.log(`Box hit: ${type}`)\n        // Could add more visual feedback here\n      }\n\n      // Register event listeners\n      EventBus.on(GAME_EVENTS.GAME_READY, handleGameReady)\n      EventBus.on(GAME_EVENTS.SCENE_READY, handleSceneReady)\n      EventBus.on(GAME_EVENTS.CONTENT_TRIGGER, handleContentTrigger)\n      EventBus.on(GAME_EVENTS.LOADING_PROGRESS, handleLoadingProgress)\n      EventBus.on(GAME_EVENTS.BOX_HIT, handleBoxHit)\n\n      // Cleanup function\n      return () => {\n        EventBus.off(GAME_EVENTS.GAME_READY, handleGameReady)\n        EventBus.off(GAME_EVENTS.SCENE_READY, handleSceneReady)\n        EventBus.off(GAME_EVENTS.CONTENT_TRIGGER, handleContentTrigger)\n        EventBus.off(GAME_EVENTS.LOADING_PROGRESS, handleLoadingProgress)\n        EventBus.off(GAME_EVENTS.BOX_HIT, handleBoxHit)\n        \n        if (phaserGameRef.current) {\n          phaserGameRef.current.destroy(true)\n          phaserGameRef.current = null\n          setIsGameReady(false)\n          setLoadingProgress(0)\n        }\n      }\n    }\n  }, [currentActiveScene, onContentTrigger])\n\n  // Cleanup on unmount\n  useEffect(() => {\n    return () => {\n      if (phaserGameRef.current) {\n        phaserGameRef.current.destroy(true)\n        phaserGameRef.current = null\n      }\n    }\n  }, [])\n\n  // Handle GameBoy button presses\n  const handleButtonPress = (button: string) => {\n    if (!phaserGameRef.current) return\n\n    // Send button events to Phaser\n    const currentScene = phaserGameRef.current.scene.getScene('MainScene')\n    if (currentScene && currentScene.input && currentScene.input.keyboard) {\n      // Simulate keyboard events for GameBoy buttons\n      switch (button) {\n        case 'A':\n          // Simulate spacebar for jump\n          currentScene.input.keyboard.emit('keydown-SPACE')\n          break\n        case 'B':\n          // Could be used for special actions\n          break\n        case 'up':\n          currentScene.input.keyboard.emit('keydown-UP')\n          break\n        case 'down':\n          currentScene.input.keyboard.emit('keydown-DOWN')\n          break\n        case 'left':\n          currentScene.input.keyboard.emit('keydown-LEFT')\n          break\n        case 'right':\n          currentScene.input.keyboard.emit('keydown-RIGHT')\n          break\n        case 'START':\n          // Could pause/unpause the game\n          break\n        case 'SELECT':\n          // Could open a menu or switch backgrounds\n          break\n        default:\n          break\n      }\n    }\n\n    EventBus.emit(GAME_EVENTS.BUTTON_PRESSED, button)\n  }\n\n  // Touch controls for mobile\n  const handleTouchStart = (e: React.TouchEvent) => {\n    e.preventDefault()\n    const rect = gameRef.current?.getBoundingClientRect()\n    if (!rect || !phaserGameRef.current) return\n\n    const touch = e.touches[0]\n    const x = touch.clientX - rect.left\n    const y = touch.clientY - rect.top\n    const width = rect.width\n    const height = rect.height\n\n    // Divide screen into zones for touch controls\n    const leftZone = width * 0.3\n    const rightZone = width * 0.7\n    const jumpZone = height * 0.5\n\n    // Left side = move left\n    if (x < leftZone) {\n      handleButtonPress('left')\n    }\n    // Right side = move right\n    else if (x > rightZone) {\n      handleButtonPress('right')\n    }\n    \n    // Upper half = jump\n    if (y < jumpZone) {\n      handleButtonPress('A') // A button jumps\n    }\n  }\n\n  // Expose button handler to parent via ref\n  useEffect(() => {\n    // Store reference to button handler for external access\n    if (gameRef.current) {\n      (gameRef.current as any).handleButtonPress = handleButtonPress\n    }\n  }, [])\n\n  return (\n    <div className={`phaser-game-wrapper ${className}`}>\n      {/* Game container */}\n      <div \n        ref={gameRef}\n        id=\"phaser-game-container\"\n        className=\"w-full h-full touch-manipulation\"\n        style={{ \n          imageRendering: 'pixelated',\n          touchAction: 'none' // Prevent default touch behaviors\n        }}\n        onTouchStart={handleTouchStart}\n        onKeyDown={(e) => keyboardNavigation.handleGameKeyboard(e.nativeEvent)}\n        role=\"application\"\n        aria-label=\"Mario platformer game. Use arrow keys or WASD to move Mario, spacebar to jump. Hit colored boxes to navigate to Resume (gold), Portfolio (green), or Contact (blue) sections.\"\n        tabIndex={0}\n      />\n      \n      {/* Loading overlay */}\n      {!isGameReady && (\n        <div className=\"absolute inset-0 bg-gameboy-screen flex flex-col items-center justify-center\">\n          <div className=\"text-gameboy-darkest font-gameboy text-center\">\n            <div className=\"text-lg mb-2\">MARIO</div>\n            <div className=\"text-xs mb-4\">Loading... {loadingProgress}%</div>\n            <div className=\"flex justify-center space-x-1\">\n              <div className=\"w-2 h-2 bg-gameboy-darkest rounded-full animate-bounce\"></div>\n              <div className=\"w-2 h-2 bg-gameboy-darkest rounded-full animate-bounce\" style={{ animationDelay: '0.1s' }}></div>\n              <div className=\"w-2 h-2 bg-gameboy-darkest rounded-full animate-bounce\" style={{ animationDelay: '0.2s' }}></div>\n            </div>\n          </div>\n        </div>\n      )}\n      \n      {/* Mobile touch instructions */}\n      {showMobileInstructions && (\n        <div className=\"absolute inset-0 bg-gameboy-screen bg-opacity-90 flex items-center justify-center z-10\">\n          <div className=\"text-gameboy-darkest font-gameboy text-center p-4\">\n            <div className=\"text-sm mb-2\">Touch Controls</div>\n            <div className=\"text-xs mb-1\">Tap left side: ← Move left</div>\n            <div className=\"text-xs mb-1\">Tap right side: Move right →</div>\n            <div className=\"text-xs mb-3\">Tap upper area: Jump ↑</div>\n            <div className=\"text-xs opacity-75\">Or use the GameBoy buttons below</div>\n          </div>\n        </div>\n      )}\n\n      {/* Game ready indicator (for debugging) */}\n      {isGameReady && process.env.NODE_ENV === 'development' && (\n        <div className=\"absolute top-2 right-2 text-xs bg-green-500 text-white px-2 py-1 rounded\">\n          Game Ready\n        </div>\n      )}\n    </div>\n  )\n}\n\nexport default PhaserGame"],"file":"assets/game-BrIDZoQh.js"}