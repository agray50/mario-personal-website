{"version":3,"mappings":"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","names":["PhaserGame","React","lazy","Promise","resolve","then","PhaserGame$1","default","module","GameBoyScreen","className","onContentTrigger","jsxs","children","jsx","style","width","height","imageRendering","Suspense","fallback","animationDelay","announceToScreenReader","message","priority","announcement","document","createElement","setAttribute","textContent","body","appendChild","setTimeout","removeChild","gameAccessibility","announceGameStart","announceMovement","direction","announceJump","announceBoxHit","contentType","resume","portfolio","contact","announceContentLoad","home","keyboardNavigation","event","key","toLowerCase","callback","preventDefault","initAccessibility","querySelector","id","head","highContrastSupport","prefersHighContrast","window","matchMedia","matches","applyHighContrast","classList","add","reducedMotionSupport","prefersReducedMotion","applyReducedMotion","GameEventBus","static","events","constructor","getInstance","instance","on","this","push","off","index","indexOf","splice","emit","args","forEach","error","removeAllListeners","EventBus","GAME_EVENTS","GAME_READY","GAME_DESTROYED","SCENE_READY","PLAYER_JUMPED","BOX_HIT","CONTENT_TRIGGER","BUTTON_PRESSED","GAMEBOY_BUTTON_PRESS","GAMEBOY_BUTTON_RELEASE","GAMEBOY_DPAD_LEFT","GAMEBOY_DPAD_RIGHT","GAMEBOY_BUTTON_A","GAMEBOY_BUTTON_B","ASSETS_LOADED","LOADING_PROGRESS","AREA_CHANGED","GameBoyButtons","onButtonPress","pressedButton","setPressedButton","useState","buttonStates","useRef","handleButtonPress","button","current","pressed","navigator","vibrate","handleTouchStart","e","handleKeyDown","nativeEvent","onClick","onTouchStart","onKeyDown","GameBoyShell","screenRef","aspectRatio","containerType","ref","gameContainer","Array","from","length","_","i","PreloadScene","Phaser","Scene","loadingText","progressText","super","preload","createLoadingScreen","loadAssets","setupLoadingEvents","cameras","main","setBackgroundColor","text","fontSize","color","fontFamily","setOrigin","time","addEvent","delay","currentText","endsWith","setText","loop","textures","exists","remove","load","spritesheet","frameWidth","frameHeight","svg","image","file","loadFallbackAssets","type","data","multiatlas","progress","percent","Math","round","atlasExists","get","delayedCall","scene","start","create","MainScene","player","platforms","contentBoxes","cursors","wasd","isGrounded","background","gameBoyButtons","left","right","A","B","currentArea","transitioning","backgroundThemes","setupWorld","createBackground","createPlatforms","createPlayer","createContentBoxes","setupControls","setupGameBoyControls","setupCollisions","setupAnimations","filter","tex","getFrameNames","physics","world","setBounds","tileSprite","setDepth","bgTexture","getSourceImage","scaleX","scaleY","scale","max","setScale","staticGroup","groundY","GAME_CONSTANTS","WORLD","GROUND_LEVEL","blockSize","groundTiles","ceil","BOUNDS","blockFrame","getRandomBlockFrame","groundTile","setDisplaySize","existing","platform1","platform2","rectangle","playerTexture","playerFrame","sprite","setCollideWorldBounds","PLAYER","SIZE","setSize","setOffset","updatePlayerBounds","halfWidth","halfHeight","x","y","setVelocityY","group","boxSize","BOXES","resumeBox","POSITIONS","RESUME","setData","setTint","portfolioBox","PORTFOLIO","contactBox","CONTACT","addMultiple","entries","box","setGravityY","input","keyboard","createCursorKeys","W","addKey","Input","Keyboard","KeyCodes","S","D","SPACE","handleJump","collider","overlap","_player","handleBoxHit","animTexture","idleFrame","walkFrames","frame","jumpFrame","anims","frames","frameRate","ANIMATIONS","FRAME_RATE","repeat","update","handlePlayerMovement","updateAnimations","checkGrounded","updateBackground","checkAreaTransitions","speed","SPEED","leftPressed","isDown","rightPressed","setVelocityX","setFlipX","currentVelocityX","velocity","friction","GROUND_FRICTION","AIR_FRICTION","abs","newVelocityX","min","up","JUMP_VELOCITY","play","getData","tweens","targets","duration","yoyo","ease","blockTypes","ground","platform","decorative","availableFrames","floor","random","playerX","playerVelocityX","screenWidth","transitionToArea","areaChange","newArea","updateBackgroundTheme","newX","onComplete","areaIndex","themeIndex","themeColors","tintColor","area","theme","destroy","gameConfig","AUTO","parent","backgroundColor","arcade","gravity","debug","render","pixelArt","antialias","roundPixels","powerPreference","mode","Scale","FIT","autoCenter","CENTER_BOTH","gamepad","audio","disableWebAudio","banner","hidePhaser","currentActiveScene","gameRef","phaserGameRef","loadingProgress","setLoadingProgress","isGameReady","setIsGameReady","showMobileInstructions","setShowMobileInstructions","isMobileDevice","test","userAgent","innerWidth","useEffect","Game","handleGameReady","handleSceneReady","handleContentTrigger","handleLoadingProgress","currentScene","getScene","touchAction","rect","getBoundingClientRect","touch","touches","clientX","clientY","top","rightZone","jumpZone","role","tabIndex"],"ignoreList":[],"sources":["../../src/components/GameBoy/GameBoyScreen.tsx","../../src/utils/accessibility.ts","../../src/components/Game/EventBus.ts","../../src/components/GameBoy/GameBoyButtons.tsx","../../src/components/GameBoy/GameBoyShell.tsx","../../src/components/Game/scenes/PreloadScene.ts","../../src/components/Game/scenes/MainScene.ts","../../src/utils/gameConfig.ts","../../src/components/Game/PhaserGame.tsx"],"sourcesContent":["import React, { Suspense } from 'react'\n\n// Lazy load the PhaserGame component to reduce initial bundle size\nconst PhaserGame = React.lazy(() => \n  import('../Game/PhaserGame').then(module => ({ default: module.default }))\n)\n\ninterface GameBoyScreenProps {\n  className?: string\n  onContentTrigger?: (contentType: string) => void\n}\n\nconst GameBoyScreen: React.FC<GameBoyScreenProps> = ({ \n  className = '',\n  onContentTrigger \n}) => {\n  return (\n    <div className={`gameboy-screen ${className}`}>\n      {/* Screen bezel - Enhanced for larger display */}\n      <div className=\"bg-gameboy-darkest p-2 rounded-lg shadow-inner\">\n        {/* Actual screen area - Enhanced responsive sizing */}\n        <div \n          className=\"gameboy-screen-enhanced bg-gameboy-screen rounded-md relative overflow-hidden\"\n          style={{ \n            width: 'var(--gameboy-screen-width)',\n            height: 'var(--gameboy-screen-height)',\n            imageRendering: 'pixelated'\n          }}\n        >\n          <Suspense fallback={\n            <div className=\"w-full h-full bg-gameboy-screen flex items-center justify-center\">\n              <div className=\"text-gameboy-darkest font-gameboy text-center\">\n                <div className=\"text-lg mb-3\">MARIO</div>\n                <div className=\"text-sm\">Loading game...</div>\n                <div className=\"flex justify-center space-x-2 mt-3\">\n                  <div className=\"w-2 h-2 bg-gameboy-darkest rounded-full animate-bounce\"></div>\n                  <div className=\"w-2 h-2 bg-gameboy-darkest rounded-full animate-bounce\" style={{ animationDelay: '0.1s' }}></div>\n                  <div className=\"w-2 h-2 bg-gameboy-darkest rounded-full animate-bounce\" style={{ animationDelay: '0.2s' }}></div>\n                </div>\n              </div>\n            </div>\n          }>\n            <PhaserGame\n              onContentTrigger={onContentTrigger}\n              className=\"w-full h-full\"\n            />\n          </Suspense>\n\n          {/* Screen shine effect - Enhanced for larger display */}\n          <div className=\"absolute inset-0 bg-gradient-to-br from-white via-transparent to-gameboy-dark opacity-15 pointer-events-none rounded-md\"></div>\n        </div>\n      </div>\n\n      {/* Screen details below - Enhanced for proportional scaling */}\n      <div className=\"flex justify-between mt-3 px-3\">\n        <div className=\"text-sm font-gameboy text-gameboy-dark\">BATTERY</div>\n        <div className=\"flex items-center space-x-2\">\n          <div className=\"w-2 h-2 bg-gameboy-light rounded-full\"></div>\n          <div className=\"text-sm font-gameboy text-gameboy-dark\">ON</div>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default GameBoyScreen","/**\n * Accessibility utilities and enhancements\n * Provides screen reader support, keyboard navigation, and ARIA features\n */\n\n// Announce content changes to screen readers\nexport const announceToScreenReader = (message: string, priority: 'polite' | 'assertive' = 'polite') => {\n  const announcement = document.createElement('div')\n  announcement.setAttribute('aria-live', priority)\n  announcement.setAttribute('aria-atomic', 'true')\n  announcement.className = 'sr-only'\n  announcement.textContent = message\n  \n  document.body.appendChild(announcement)\n  \n  // Remove after announcement\n  setTimeout(() => {\n    document.body.removeChild(announcement)\n  }, 1000)\n}\n\n// Enhanced focus management\nexport const manageFocus = {\n  // Store the previously focused element\n  previousFocus: null as HTMLElement | null,\n  \n  // Set focus to an element\n  setFocus: (element: HTMLElement | null) => {\n    if (element) {\n      element.focus()\n    }\n  },\n  \n  // Store current focus and set new focus\n  trapFocus: (element: HTMLElement) => {\n    manageFocus.previousFocus = document.activeElement as HTMLElement\n    element.focus()\n  },\n  \n  // Return focus to previously focused element\n  returnFocus: () => {\n    if (manageFocus.previousFocus) {\n      manageFocus.previousFocus.focus()\n      manageFocus.previousFocus = null\n    }\n  }\n}\n\n// Game accessibility announcements\nexport const gameAccessibility = {\n  announceGameStart: () => {\n    announceToScreenReader('Mario game loaded. Use arrow keys or WASD to move, spacebar or A button to jump. Hit colored boxes to navigate to different sections.', 'assertive')\n  },\n  \n  announceMovement: (direction: string) => {\n    announceToScreenReader(`Mario moved ${direction}`, 'polite')\n  },\n  \n  announceJump: () => {\n    announceToScreenReader('Mario jumped', 'polite')\n  },\n  \n  announceBoxHit: (contentType: string) => {\n    const messages = {\n      'resume': 'Navigating to Resume section',\n      'portfolio': 'Navigating to Portfolio section', \n      'contact': 'Navigating to Contact section'\n    }\n    announceToScreenReader(messages[contentType as keyof typeof messages] || `Hit ${contentType} box`, 'assertive')\n  },\n  \n  announceContentLoad: (contentType: string) => {\n    const messages = {\n      'resume': 'Resume page loaded',\n      'portfolio': 'Portfolio page loaded',\n      'contact': 'Contact page loaded',\n      'home': 'Home page with Mario game loaded'\n    }\n    announceToScreenReader(messages[contentType as keyof typeof messages] || `${contentType} page loaded`, 'assertive')\n  }\n}\n\n// Keyboard navigation helpers\nexport const keyboardNavigation = {\n  // Handle keyboard events for game controls\n  handleGameKeyboard: (event: KeyboardEvent) => {\n    const { key } = event\n    \n    // Announce movement for screen readers\n    switch (key.toLowerCase()) {\n      case 'arrowleft':\n      case 'a':\n        gameAccessibility.announceMovement('left')\n        break\n      case 'arrowright': \n      case 'd':\n        gameAccessibility.announceMovement('right')\n        break\n      case 'arrowup':\n      case 'w':\n      case ' ':\n        gameAccessibility.announceJump()\n        break\n    }\n  },\n  \n  // Enhanced button keyboard handling\n  handleButtonKeyboard: (event: KeyboardEvent, callback: () => void) => {\n    if (event.key === 'Enter' || event.key === ' ') {\n      event.preventDefault()\n      callback()\n    }\n  }\n}\n\n// Color contrast checker (for development)\nexport const checkColorContrast = () => {\n  if (process.env.NODE_ENV !== 'development') return\n  \n  // Basic contrast checking - in a real app you'd use a proper contrast checker\n  console.log('Color Contrast Check:')\n  console.log('GameBoy colors designed with high contrast ratios:')\n  console.log('- Dark text on light backgrounds: High contrast')\n  console.log('- Light text on dark backgrounds: High contrast')\n  console.log('- Button states have clear visual differences')\n}\n\n// Initialize accessibility features\nexport const initAccessibility = () => {\n  // Add skip link styles\n  const skipLinkStyles = `\n    .skip-link {\n      position: absolute;\n      top: -40px;\n      left: 6px;\n      background: #000;\n      color: #fff;\n      padding: 8px;\n      text-decoration: none;\n      border-radius: 4px;\n      z-index: 1000;\n      font-family: inherit;\n    }\n    .skip-link:focus {\n      top: 6px;\n    }\n    .sr-only {\n      position: absolute;\n      width: 1px;\n      height: 1px;\n      padding: 0;\n      margin: -1px;\n      overflow: hidden;\n      clip: rect(0, 0, 0, 0);\n      white-space: nowrap;\n      border: 0;\n    }\n  `\n  \n  // Add styles if they don't exist\n  if (!document.querySelector('#accessibility-styles')) {\n    const style = document.createElement('style')\n    style.id = 'accessibility-styles'\n    style.textContent = skipLinkStyles\n    document.head.appendChild(style)\n  }\n  \n  // Check color contrast in development\n  checkColorContrast()\n}\n\n// High contrast mode detection and support\nexport const highContrastSupport = {\n  // Detect if user prefers high contrast\n  prefersHighContrast: () => {\n    return window.matchMedia('(prefers-contrast: high)').matches\n  },\n  \n  // Apply high contrast styles if needed\n  applyHighContrast: () => {\n    if (highContrastSupport.prefersHighContrast()) {\n      document.body.classList.add('high-contrast-mode')\n    }\n  }\n}\n\n// Reduced motion support\nexport const reducedMotionSupport = {\n  // Detect if user prefers reduced motion\n  prefersReducedMotion: () => {\n    return window.matchMedia('(prefers-reduced-motion: reduce)').matches\n  },\n  \n  // Apply reduced motion styles\n  applyReducedMotion: () => {\n    if (reducedMotionSupport.prefersReducedMotion()) {\n      document.body.classList.add('reduced-motion')\n    }\n  }\n}","/**\n * EventBus for communication between React and Phaser\n * Simple browser-compatible event system\n */\nclass GameEventBus {\n  private static instance: GameEventBus\n  private events: { [key: string]: Array<(...args: any[]) => void> } = {}\n\n  private constructor() {}\n\n  public static getInstance(): GameEventBus {\n    if (!GameEventBus.instance) {\n      GameEventBus.instance = new GameEventBus()\n    }\n    return GameEventBus.instance\n  }\n\n  public on(event: string, callback: (...args: any[]) => void) {\n    if (!this.events[event]) {\n      this.events[event] = []\n    }\n    this.events[event].push(callback)\n  }\n\n  public off(event: string, callback: (...args: any[]) => void) {\n    if (!this.events[event]) return\n    \n    const index = this.events[event].indexOf(callback)\n    if (index > -1) {\n      this.events[event].splice(index, 1)\n    }\n  }\n\n  public emit(event: string, ...args: any[]) {\n    if (!this.events[event]) return\n    \n    this.events[event].forEach(callback => {\n      try {\n        callback(...args)\n      } catch (error) {\n        console.error(`EventBus error on ${event}:`, error)\n      }\n    })\n  }\n\n  public removeAllListeners(event?: string) {\n    if (event) {\n      delete this.events[event]\n    } else {\n      this.events = {}\n    }\n  }\n\n  // Game lifecycle events\n  public static readonly GAME_READY = 'game-ready'\n  public static readonly GAME_DESTROYED = 'game-destroyed'\n  public static readonly SCENE_READY = 'scene-ready'\n\n  // Player events\n  public static readonly PLAYER_MOVED = 'player-moved'\n  public static readonly PLAYER_JUMPED = 'player-jumped'\n\n  // Interaction events\n  public static readonly BOX_HIT = 'box-hit'\n  public static readonly CONTENT_TRIGGER = 'content-trigger'\n\n  // UI events\n  public static readonly BUTTON_PRESSED = 'button-pressed'\n  public static readonly SHOW_CONTENT = 'show-content'\n  public static readonly HIDE_CONTENT = 'hide-content'\n\n  // GameBoy button control events\n  public static readonly GAMEBOY_BUTTON_PRESS = 'gameboy-button-press'\n  public static readonly GAMEBOY_BUTTON_RELEASE = 'gameboy-button-release'\n  public static readonly GAMEBOY_DPAD_LEFT = 'gameboy-dpad-left'\n  public static readonly GAMEBOY_DPAD_RIGHT = 'gameboy-dpad-right'\n  public static readonly GAMEBOY_BUTTON_A = 'gameboy-button-a'\n  public static readonly GAMEBOY_BUTTON_B = 'gameboy-button-b'\n\n  // Asset loading events\n  public static readonly ASSETS_LOADING = 'assets-loading'\n  public static readonly ASSETS_LOADED = 'assets-loaded'\n  public static readonly LOADING_PROGRESS = 'loading-progress'\n\n  // Game state events\n  public static readonly GAME_STARTED = 'game-started'\n  public static readonly GAME_PAUSED = 'game-paused'\n  public static readonly GAME_RESUMED = 'game-resumed'\n\n  // Map progression events\n  public static readonly AREA_CHANGED = 'area-changed'\n}\n\n// Export singleton instance\nconst EventBus = GameEventBus.getInstance()\nexport default EventBus\n\n// Export event constants for easy importing\nexport const GAME_EVENTS = {\n  GAME_READY: GameEventBus.GAME_READY,\n  GAME_DESTROYED: GameEventBus.GAME_DESTROYED,\n  SCENE_READY: GameEventBus.SCENE_READY,\n  PLAYER_MOVED: GameEventBus.PLAYER_MOVED,\n  PLAYER_JUMPED: GameEventBus.PLAYER_JUMPED,\n  BOX_HIT: GameEventBus.BOX_HIT,\n  CONTENT_TRIGGER: GameEventBus.CONTENT_TRIGGER,\n  BUTTON_PRESSED: GameEventBus.BUTTON_PRESSED,\n  SHOW_CONTENT: GameEventBus.SHOW_CONTENT,\n  HIDE_CONTENT: GameEventBus.HIDE_CONTENT,\n  GAMEBOY_BUTTON_PRESS: GameEventBus.GAMEBOY_BUTTON_PRESS,\n  GAMEBOY_BUTTON_RELEASE: GameEventBus.GAMEBOY_BUTTON_RELEASE,\n  GAMEBOY_DPAD_LEFT: GameEventBus.GAMEBOY_DPAD_LEFT,\n  GAMEBOY_DPAD_RIGHT: GameEventBus.GAMEBOY_DPAD_RIGHT,\n  GAMEBOY_BUTTON_A: GameEventBus.GAMEBOY_BUTTON_A,\n  GAMEBOY_BUTTON_B: GameEventBus.GAMEBOY_BUTTON_B,\n  ASSETS_LOADING: GameEventBus.ASSETS_LOADING,\n  ASSETS_LOADED: GameEventBus.ASSETS_LOADED,\n  LOADING_PROGRESS: GameEventBus.LOADING_PROGRESS,\n  GAME_STARTED: GameEventBus.GAME_STARTED,\n  GAME_PAUSED: GameEventBus.GAME_PAUSED,\n  GAME_RESUMED: GameEventBus.GAME_RESUMED,\n  AREA_CHANGED: GameEventBus.AREA_CHANGED,\n} as const","import React, { useState, useRef } from 'react'\nimport { keyboardNavigation } from '../../utils/accessibility'\nimport EventBus, { GAME_EVENTS } from '../Game/EventBus'\n\ninterface GameBoyButtonsProps {\n  onButtonPress?: (button: string) => void\n  className?: string\n}\n\nconst GameBoyButtons: React.FC<GameBoyButtonsProps> = ({ \n  onButtonPress,\n  className = '' \n}) => {\n  const [pressedButton, setPressedButton] = useState<string | null>(null)\n  const buttonStates = useRef<{ [key: string]: boolean }>({})\n\n  const handleButtonPress = (button: string) => {\n    setPressedButton(button)\n    onButtonPress?.(button)\n    \n    // Track button state for continuous movement\n    buttonStates.current[button] = true\n    \n    // Emit GameBoy control events to Phaser game\n    switch (button) {\n      case 'left':\n        EventBus.emit(GAME_EVENTS.GAMEBOY_DPAD_LEFT, { pressed: true })\n        EventBus.emit(GAME_EVENTS.GAMEBOY_BUTTON_PRESS, { button: 'left', pressed: true })\n        break\n      case 'right':\n        EventBus.emit(GAME_EVENTS.GAMEBOY_DPAD_RIGHT, { pressed: true })\n        EventBus.emit(GAME_EVENTS.GAMEBOY_BUTTON_PRESS, { button: 'right', pressed: true })\n        break\n      case 'A':\n        EventBus.emit(GAME_EVENTS.GAMEBOY_BUTTON_A, { pressed: true })\n        EventBus.emit(GAME_EVENTS.GAMEBOY_BUTTON_PRESS, { button: 'A', pressed: true })\n        break\n      case 'B':\n        EventBus.emit(GAME_EVENTS.GAMEBOY_BUTTON_B, { pressed: true })\n        EventBus.emit(GAME_EVENTS.GAMEBOY_BUTTON_PRESS, { button: 'B', pressed: true })\n        break\n      default:\n        EventBus.emit(GAME_EVENTS.GAMEBOY_BUTTON_PRESS, { button, pressed: true })\n    }\n    \n    // Haptic feedback for mobile devices\n    if ('vibrate' in navigator) {\n      navigator.vibrate(50)\n    }\n    \n    // Visual feedback\n    setTimeout(() => {\n      setPressedButton(null)\n      \n      // Emit button release events\n      buttonStates.current[button] = false\n      switch (button) {\n        case 'left':\n          EventBus.emit(GAME_EVENTS.GAMEBOY_DPAD_LEFT, { pressed: false })\n          EventBus.emit(GAME_EVENTS.GAMEBOY_BUTTON_RELEASE, { button: 'left', pressed: false })\n          break\n        case 'right':\n          EventBus.emit(GAME_EVENTS.GAMEBOY_DPAD_RIGHT, { pressed: false })\n          EventBus.emit(GAME_EVENTS.GAMEBOY_BUTTON_RELEASE, { button: 'right', pressed: false })\n          break\n        case 'A':\n          EventBus.emit(GAME_EVENTS.GAMEBOY_BUTTON_A, { pressed: false })\n          EventBus.emit(GAME_EVENTS.GAMEBOY_BUTTON_RELEASE, { button: 'A', pressed: false })\n          break\n        case 'B':\n          EventBus.emit(GAME_EVENTS.GAMEBOY_BUTTON_B, { pressed: false })\n          EventBus.emit(GAME_EVENTS.GAMEBOY_BUTTON_RELEASE, { button: 'B', pressed: false })\n          break\n        default:\n          EventBus.emit(GAME_EVENTS.GAMEBOY_BUTTON_RELEASE, { button, pressed: false })\n      }\n    }, 150)\n    \n    console.log(`GameBoy button pressed: ${button}`)\n  }\n\n  const handleTouchStart = (e: React.TouchEvent, button: string) => {\n    e.preventDefault() // Prevent scrolling and other touch behaviors\n    handleButtonPress(button)\n  }\n\n  const handleKeyDown = (event: React.KeyboardEvent, button: string) => {\n    keyboardNavigation.handleButtonKeyboard(event.nativeEvent, () => {\n      handleButtonPress(button)\n    })\n  }\n\n  return (\n    <div className={`gameboy-buttons ${className}`}>\n      {/* D-Pad and Action Buttons Container */}\n      <div className=\"flex justify-between items-center\">\n        {/* Left side - D-Pad */}\n        <div className=\"relative\">\n          <div className=\"text-xs font-gameboy text-gameboy-dark mb-2 text-center\">D-PAD</div>\n          \n          {/* D-Pad */}\n          <div className=\"relative w-16 h-16\">\n            {/* Horizontal bar */}\n            <div className=\"absolute top-1/2 left-0 w-full h-4 bg-gameboy-buttons rounded transform -translate-y-1/2 shadow-inner\"></div>\n            \n            {/* Vertical bar */}\n            <div className=\"absolute left-1/2 top-0 w-4 h-full bg-gameboy-buttons rounded transform -translate-x-1/2 shadow-inner\"></div>\n            \n            {/* Direction buttons */}\n            <button\n              className={`absolute top-0 left-1/2 w-5 h-7 sm:w-4 sm:h-6 transform -translate-x-1/2 bg-gameboy-buttons hover:bg-gameboy-dark active:bg-gameboy-dark transition-all duration-75 focus:outline-none focus:ring-2 focus:ring-gameboy-light rounded-t touch-manipulation ${\n                pressedButton === 'up' ? 'bg-gameboy-dark scale-95 shadow-inner' : ''\n              }`}\n              onClick={() => handleButtonPress('up')}\n              onTouchStart={(e) => handleTouchStart(e, 'up')}\n              onKeyDown={(e) => handleKeyDown(e, 'up')}\n              aria-label=\"D-Pad Up\"\n            />\n            \n            <button\n              className={`absolute bottom-0 left-1/2 w-5 h-7 sm:w-4 sm:h-6 transform -translate-x-1/2 bg-gameboy-buttons hover:bg-gameboy-dark active:bg-gameboy-dark transition-all duration-75 focus:outline-none focus:ring-2 focus:ring-gameboy-light rounded-b touch-manipulation ${\n                pressedButton === 'down' ? 'bg-gameboy-dark scale-95 shadow-inner' : ''\n              }`}\n              onClick={() => handleButtonPress('down')}\n              onTouchStart={(e) => handleTouchStart(e, 'down')}\n              onKeyDown={(e) => handleKeyDown(e, 'down')}\n              aria-label=\"D-Pad Down\"\n            />\n            \n            <button\n              className={`absolute left-0 top-1/2 w-7 h-5 sm:w-6 sm:h-4 transform -translate-y-1/2 bg-gameboy-buttons hover:bg-gameboy-dark active:bg-gameboy-dark transition-all duration-75 focus:outline-none focus:ring-2 focus:ring-gameboy-light rounded-l touch-manipulation ${\n                pressedButton === 'left' ? 'bg-gameboy-dark scale-95 shadow-inner' : ''\n              }`}\n              onClick={() => handleButtonPress('left')}\n              onTouchStart={(e) => handleTouchStart(e, 'left')}\n              onKeyDown={(e) => handleKeyDown(e, 'left')}\n              aria-label=\"D-Pad Left\"\n            />\n            \n            <button\n              className={`absolute right-0 top-1/2 w-7 h-5 sm:w-6 sm:h-4 transform -translate-y-1/2 bg-gameboy-buttons hover:bg-gameboy-dark active:bg-gameboy-dark transition-all duration-75 focus:outline-none focus:ring-2 focus:ring-gameboy-light rounded-r touch-manipulation ${\n                pressedButton === 'right' ? 'bg-gameboy-dark scale-95 shadow-inner' : ''\n              }`}\n              onClick={() => handleButtonPress('right')}\n              onTouchStart={(e) => handleTouchStart(e, 'right')}\n              onKeyDown={(e) => handleKeyDown(e, 'right')}\n              aria-label=\"D-Pad Right\"\n            />\n          </div>\n        </div>\n\n        {/* Right side - Action Buttons */}\n        <div>\n          <div className=\"flex flex-col space-y-2\">\n            {/* B and A buttons */}\n            <div className=\"flex space-x-3 justify-end\">\n              <div className=\"text-center\">\n                <button\n                  className={`w-10 h-10 sm:w-8 sm:h-8 bg-gameboy-buttons hover:bg-gameboy-dark active:bg-gameboy-dark rounded-full shadow-inner transition-all duration-75 focus:outline-none focus:ring-2 focus:ring-gameboy-light touch-manipulation ${\n                    pressedButton === 'B' ? 'bg-gameboy-dark scale-95 shadow-inner' : ''\n                  }`}\n                  onClick={() => handleButtonPress('B')}\n                  onTouchStart={(e) => handleTouchStart(e, 'B')}\n                  onKeyDown={(e) => handleKeyDown(e, 'B')}\n                  aria-label=\"B Button\"\n                />\n                <div className=\"text-xs font-gameboy text-gameboy-dark mt-1\">B</div>\n              </div>\n              \n              <div className=\"text-center\">\n                <button\n                  className={`w-10 h-10 sm:w-8 sm:h-8 bg-gameboy-buttons hover:bg-gameboy-dark active:bg-gameboy-dark rounded-full shadow-inner transition-all duration-75 focus:outline-none focus:ring-2 focus:ring-gameboy-light touch-manipulation ${\n                    pressedButton === 'A' ? 'bg-gameboy-dark scale-95 shadow-inner' : ''\n                  }`}\n                  onClick={() => handleButtonPress('A')}\n                  onTouchStart={(e) => handleTouchStart(e, 'A')}\n                  onKeyDown={(e) => handleKeyDown(e, 'A')}\n                  aria-label=\"A Button\"\n                />\n                <div className=\"text-xs font-gameboy text-gameboy-dark mt-1\">A</div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Bottom buttons - Select and Start */}\n      <div className=\"flex justify-center space-x-6 mt-6\">\n        <div className=\"text-center\">\n          <button\n            className={`w-14 h-4 sm:w-12 sm:h-3 bg-gameboy-buttons hover:bg-gameboy-dark active:bg-gameboy-dark rounded-full shadow-inner transition-all duration-75 focus:outline-none focus:ring-2 focus:ring-gameboy-light touch-manipulation ${\n              pressedButton === 'SELECT' ? 'bg-gameboy-dark scale-95 shadow-inner' : ''\n            }`}\n            onClick={() => handleButtonPress('SELECT')}\n            onTouchStart={(e) => handleTouchStart(e, 'SELECT')}\n            onKeyDown={(e) => handleKeyDown(e, 'SELECT')}\n            aria-label=\"Select Button\"\n          />\n          <div className=\"text-xs font-gameboy text-gameboy-dark mt-1\">SELECT</div>\n        </div>\n        \n        <div className=\"text-center\">\n          <button\n            className={`w-14 h-4 sm:w-12 sm:h-3 bg-gameboy-buttons hover:bg-gameboy-dark active:bg-gameboy-dark rounded-full shadow-inner transition-all duration-75 focus:outline-none focus:ring-2 focus:ring-gameboy-light touch-manipulation ${\n              pressedButton === 'START' ? 'bg-gameboy-dark scale-95 shadow-inner' : ''\n            }`}\n            onClick={() => handleButtonPress('START')}\n            onTouchStart={(e) => handleTouchStart(e, 'START')}\n            onKeyDown={(e) => handleKeyDown(e, 'START')}\n            aria-label=\"Start Button\"\n          />\n          <div className=\"text-xs font-gameboy text-gameboy-dark mt-1\">START</div>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default GameBoyButtons","import React, { useRef } from 'react'\nimport GameBoyScreen from './GameBoyScreen'\nimport GameBoyButtons from './GameBoyButtons'\n\ninterface GameBoyShellProps {\n  className?: string\n  onContentTrigger?: (contentType: string) => void\n}\n\nconst GameBoyShell: React.FC<GameBoyShellProps> = ({ \n  className = '',\n  onContentTrigger \n}) => {\n  const screenRef = useRef<HTMLDivElement>(null)\n  \n  const handleButtonPress = (button: string) => {\n    // Find the Phaser game component and send the button press\n    const gameContainer = screenRef.current?.querySelector('#phaser-game-container')\n    if (gameContainer && (gameContainer as any).handleButtonPress) {\n      (gameContainer as any).handleButtonPress(button)\n    }\n  }\n  \n  return (\n    <div className={`gameboy-shell ${className}`}>\n      {/* Main GameBoy body - Enhanced viewport-based scaling */}\n      <div \n        className=\"relative bg-gameboy-shell border-4 border-gameboy-buttons rounded-3xl shadow-2xl p-4 sm:p-6 mx-auto gameboy-enhanced\" \n        style={{\n          width: 'clamp(400px, 75vw, 1200px)',\n          aspectRatio: '10/16', \n          imageRendering: 'pixelated',\n          containerType: 'inline-size'\n        }}\n      >\n        {/* Top section with brand text */}\n        <div className=\"text-center mb-4\">\n          <div className=\"text-sm font-gameboy text-gameboy-dark mb-1\">GAME BOY</div>\n          <div className=\"w-20 h-5 bg-gameboy-buttons rounded-full mx-auto mb-2\">\n            <div className=\"w-16 h-2 bg-gameboy-dark rounded-full mx-auto translate-y-1\"></div>\n          </div>\n        </div>\n\n        {/* Screen section */}\n        <div ref={screenRef} className=\"mb-6\">\n          <div className=\"bg-gameboy-dark p-4 rounded-lg\">\n            <GameBoyScreen onContentTrigger={onContentTrigger} />\n          </div>\n          \n          {/* Screen label */}\n          <div className=\"text-center mt-2\">\n            <div className=\"text-sm font-gameboy text-gameboy-dark\">DOT MATRIX WITH STEREO SOUND</div>\n          </div>\n        </div>\n\n        {/* Controls section */}\n        <GameBoyButtons onButtonPress={handleButtonPress} />\n\n        {/* Bottom section with Nintendo branding */}\n        <div className=\"text-center mt-4\">\n          <div className=\"text-sm font-gameboy text-gameboy-dark\">Nintendo</div>\n        </div>\n\n        {/* Speaker holes - Enhanced for proportional scaling */}\n        <div className=\"absolute top-6 right-8\">\n          <div className=\"grid grid-cols-6 gap-1\">\n            {Array.from({ length: 36 }, (_, i) => (\n              <div\n                key={i}\n                className=\"w-1.5 h-1.5 bg-gameboy-dark rounded-full\"\n              />\n            ))}\n          </div>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default GameBoyShell","import Phaser from 'phaser'\nimport EventBus, { GAME_EVENTS } from '../EventBus'\n\n/**\n * PreloadScene - Handles asset loading for the Mario GameBoy game\n * Shows loading progress and transitions to main game scene\n */\nexport default class PreloadScene extends Phaser.Scene {\n  private loadingText!: Phaser.GameObjects.Text\n  private progressText!: Phaser.GameObjects.Text\n\n  constructor() {\n    super({ key: 'PreloadScene' })\n  }\n\n  preload() {\n    this.createLoadingScreen()\n    this.loadAssets()\n    this.setupLoadingEvents()\n  }\n\n  private createLoadingScreen() {\n    const { width, height } = this.cameras.main\n    \n    // GameBoy screen background\n    this.cameras.main.setBackgroundColor('#c7d32c')\n    \n    // Loading text - Enhanced for 2x canvas\n    this.loadingText = this.add.text(width / 2, height / 2 - 40, 'MARIO', {\n      fontSize: '32px', // Scaled 2x for enhanced canvas\n      color: '#0f380f',\n      fontFamily: 'monospace'\n    }).setOrigin(0.5)\n    \n    // Progress text - Enhanced for 2x canvas\n    this.progressText = this.add.text(width / 2, height / 2 + 20, 'Loading... 0%', {\n      fontSize: '16px', // Scaled 2x for enhanced canvas\n      color: '#0f380f',\n      fontFamily: 'monospace'\n    }).setOrigin(0.5)\n    \n    // Simple loading animation - blinking dots\n    this.time.addEvent({\n      delay: 500,\n      callback: () => {\n        const currentText = this.loadingText.text\n        if (currentText.endsWith('...')) {\n          this.loadingText.setText('MARIO')\n        } else {\n          this.loadingText.setText(currentText + '.')\n        }\n      },\n      loop: true\n    })\n  }\n\n  private loadAssets() {\n    // Clean up existing atlas if it exists (professional asset replacement pattern)\n    if (this.textures.exists('mario-atlas')) {\n      console.log('Removing existing mario-atlas texture for professional asset upgrade')\n      this.textures.remove('mario-atlas')\n    }\n    \n    // Load professional Mario sprite atlas with blocks (PNG-based)\n    // Load the mario sprites as spritesheet instead\n    this.load.spritesheet('mario-sprites', '/assets/sprites/mario_1.png', {\n      frameWidth: 16,\n      frameHeight: 16\n    })\n    \n    // Load blocks as spritesheet\n    this.load.spritesheet('blocks-sprites', '/assets/sprites/blocks_1.png', {\n      frameWidth: 16,\n      frameHeight: 16\n    })\n    \n    // Also try the old SVG as backup\n    this.load.svg('mario-atlas-svg', '/assets/sprites/mario-atlas.svg')\n    \n    // Blocks are now included in the mario-atlas multiatlas\n    \n    // Load professional Mario background (bg-1-1.png)\n    this.load.image('mario-background', '/assets/backgrounds/bg-1-1.png')\n    \n    // Enhanced error handling for asset loading\n    this.load.on('loaderror', (file: any) => {\n      console.error(`Failed to load asset: ${file.key}`, file)\n      console.error('File details:', {\n        url: file.url,\n        type: file.type,\n        config: file.config\n      })\n      if (file.key === 'mario-atlas') {\n        console.log('Mario atlas (with blocks) loading failed, check asset paths and format')\n        // Try fallback loading\n        this.loadFallbackAssets()\n      }\n      if (file.key === 'mario-background') {\n        console.log('Mario background loading failed, using solid color fallback')\n      }\n    })\n\n    // Enhanced loading success tracking\n    this.load.on('filecomplete', (key: string, type: string, data: any) => {\n      console.log(`✓ Asset loaded successfully: ${key} (type: ${type})`)\n      if (key === 'mario-atlas') {\n        console.log('Mario atlas frames available:', Object.keys(data.frames || {}))\n      }\n    })\n\n    // Audio assets (placeholder - would load actual Mario sounds)\n    // this.load.audio('jump', '/assets/audio/jump.mp3')\n    // this.load.audio('coin', '/assets/audio/coin.mp3')\n    \n    console.log('Loading professional Mario assets: multiatlas (mario_1.png + blocks_1.png) + bg-1-1.png')\n  }\n\n  private loadFallbackAssets() {\n    console.log('Loading fallback assets...')\n    // Try loading the older working atlas format\n    this.load.multiatlas('mario-atlas', '/assets/sprites/mario-atlas.json', '/assets/sprites/')\n  }\n\n  private setupLoadingEvents() {\n    // Update loading progress\n    this.load.on('progress', (progress: number) => {\n      const percent = Math.round(progress * 100)\n      this.progressText.setText(`Loading... ${percent}%`)\n      \n      // Emit progress event to React\n      EventBus.emit(GAME_EVENTS.LOADING_PROGRESS, percent)\n    })\n\n    // Asset loading complete\n    this.load.on('complete', () => {\n      console.log('🎮 All assets loaded, transitioning to MainScene...')\n      this.progressText.setText('Ready!')\n      EventBus.emit(GAME_EVENTS.ASSETS_LOADED)\n      \n      // Verify assets before transitioning\n      const atlasExists = this.textures.exists('mario-atlas')\n      const backgroundExists = this.textures.exists('mario-background')\n      \n      console.log('Asset verification:', { atlasExists, backgroundExists })\n      \n      if (atlasExists) {\n        const atlas = this.textures.get('mario-atlas')\n        console.log('Atlas loaded with source images:', atlas.source?.length || 0)\n      }\n      \n      // Transition to main scene after brief delay\n      this.time.delayedCall(500, () => {\n        console.log('🚀 Starting MainScene...')\n        this.scene.start('MainScene')\n      })\n    })\n  }\n\n  create() {\n    // Scene is ready\n    console.log('🚀 PreloadScene created - starting asset loading...')\n    \n    // Debug scene state\n    console.log('Scene registry keys:', this.scene.manager.keys)\n    console.log('Current scene key:', this.scene.key)\n  }\n}","import Phaser from 'phaser'\nimport EventBus, { GAME_EVENTS } from '../EventBus'\nimport { GAME_CONSTANTS } from '../../../utils/gameConfig'\n\n/**\n * MainScene - The main Mario platformer gameplay scene\n * Handles player movement, collision detection, and content box interactions\n */\nexport default class MainScene extends Phaser.Scene {\n  private player!: Phaser.Physics.Arcade.Sprite\n  private platforms!: Phaser.Physics.Arcade.StaticGroup\n  private contentBoxes!: Phaser.Physics.Arcade.Group\n  private cursors!: Phaser.Types.Input.Keyboard.CursorKeys\n  private wasd!: { [key: string]: Phaser.Input.Keyboard.Key }\n  private isGrounded = false\n  private background!: Phaser.GameObjects.TileSprite\n  private gameBoyButtons = {\n    left: false,\n    right: false,\n    A: false,\n    B: false,\n  }\n  \n  // Dynamic map progression state\n  private currentArea = 0\n  private transitioning = false\n  private backgroundThemes = [\n    '/assets/backgrounds/bg-1-1.png', // Classic overworld\n    '/assets/backgrounds/bg-1-1.png', // Reuse for now, can be expanded\n    '/assets/backgrounds/bg-1-1.png', // Reuse for now, can be expanded\n    '/assets/backgrounds/bg-1-1.png'  // Reuse for now, can be expanded\n  ]\n\n  constructor() {\n    super({ key: 'MainScene' })\n  }\n\n  create() {\n    console.log('🎯 MainScene.create() called - starting game setup...')\n    \n    this.setupWorld()\n    this.createBackground()\n    this.createPlatforms()\n    this.createPlayer()\n    this.createContentBoxes()\n    this.setupControls()\n    this.setupGameBoyControls()\n    this.setupCollisions()\n    this.setupAnimations()\n    \n    // Verify professional assets loaded correctly\n    const textures = ['mario-atlas', 'mario-sprites', 'blocks-sprites', 'mario-atlas-svg']\n    const loadedTextures = textures.filter(tex => this.textures.exists(tex))\n    console.log('✓ Loaded textures:', loadedTextures)\n    \n    if (this.textures.exists('mario-atlas')) {\n      console.log('✓ Professional Mario atlas loaded successfully')\n      const atlasFrames = this.textures.get('mario-atlas').getFrameNames()\n      console.log('✓ Professional atlas loaded with frames:', atlasFrames.slice(0, 10))\n    } else if (this.textures.exists('mario-sprites')) {\n      console.log('✓ Mario spritesheet loaded successfully')\n      const texture = this.textures.get('mario-sprites')\n      console.log('✓ Mario spritesheet frames:', texture.frameTotal)\n    } else if (this.textures.exists('mario-atlas-svg')) {\n      console.log('✓ Mario SVG atlas loaded successfully')\n    } else {\n      console.warn('⚠ No Mario textures found - check asset loading')\n    }\n    \n    if (this.textures.exists('mario-background')) {\n      console.log('✓ Professional Mario background loaded successfully')\n    } else {\n      console.warn('⚠ Mario background not found - check asset loading')\n    }\n    \n    // Notify React that the game is ready\n    EventBus.emit(GAME_EVENTS.SCENE_READY, this)\n    EventBus.emit(GAME_EVENTS.GAME_READY)\n    \n    console.log('🎮 MainScene setup complete - game should be playable!')\n  }\n\n  private setupWorld() {\n    const { width, height } = this.cameras.main\n    \n    // Set world bounds\n    this.physics.world.setBounds(0, 0, width, height)\n    \n    // GameBoy screen background (fallback)\n    this.cameras.main.setBackgroundColor('#c7d32c')\n  }\n\n  private createBackground() {\n    const { width, height } = this.cameras.main\n    \n    // Create scrolling background using bg-1-1.png\n    if (this.textures.exists('mario-background')) {\n      this.background = this.add.tileSprite(0, 0, width, height, 'mario-background')\n      this.background.setOrigin(0, 0)\n      this.background.setDepth(-10) // Behind all other objects\n      \n      // Scale the background to fit the enhanced canvas while maintaining aspect ratio\n      const bgTexture = this.textures.get('mario-background').getSourceImage() as HTMLImageElement\n      const scaleX = width / bgTexture.width\n      const scaleY = height / bgTexture.height\n      const scale = Math.max(scaleX, scaleY) // Use max to fill the screen\n      \n      this.background.setScale(scale)\n      console.log('✓ Mario background created with scrolling capability')\n    }\n  }\n\n  private createPlatforms() {\n    // Create ground platform\n    this.platforms = this.physics.add.staticGroup()\n    \n    // Main ground platform using blocks_1.png sprites (scaled for enhanced canvas)\n    const groundY = GAME_CONSTANTS.WORLD.GROUND_LEVEL\n    const blockSize = 64 // Enhanced block size for 2x canvas\n    const groundTiles = Math.ceil(GAME_CONSTANTS.WORLD.BOUNDS.width / blockSize)\n    \n    if (this.textures.exists('mario-atlas')) {\n      // Create ground tiles using professional block sprites from atlas with variety\n      for (let i = 0; i < groundTiles; i++) {\n        const blockFrame = this.getRandomBlockFrame('ground')\n        const groundTile = this.add.image(\n          i * blockSize + (blockSize / 2), \n          groundY + (blockSize / 2), \n          'mario-atlas', \n          blockFrame\n        )\n        groundTile.setDisplaySize(blockSize, blockSize)\n        // Set up physics body for collision\n        this.physics.add.existing(groundTile, true) // true = static body\n        this.platforms.add(groundTile)\n      }\n      \n      // Add floating platforms using varied block sprites from atlas (scaled positions)\n      const platform1 = this.add.image(128, 240, 'mario-atlas', this.getRandomBlockFrame('platform')) // Scaled 2x\n      platform1.setDisplaySize(blockSize * 1.5, blockSize)\n      this.physics.add.existing(platform1, true)\n      this.platforms.add(platform1)\n      \n      const platform2 = this.add.image(384, 200, 'mario-atlas', this.getRandomBlockFrame('platform')) // Scaled 2x  \n      platform2.setDisplaySize(blockSize * 1.5, blockSize)\n      this.physics.add.existing(platform2, true)\n      this.platforms.add(platform2)\n      \n      console.log('✓ Platforms created using varied professional block sprites from atlas')\n    } else {\n      // Fallback to rectangles if blocks sprite doesn't load\n      for (let i = 0; i < groundTiles; i++) {\n        const groundTile = this.add.rectangle(\n          i * blockSize + (blockSize / 2), \n          groundY + (blockSize / 2), \n          blockSize, \n          blockSize, \n          0x8b4513 // Brown color for ground\n        )\n        this.platforms.add(groundTile)\n      }\n      \n      // Fallback floating platforms\n      const platform1 = this.add.rectangle(128, 240, 96, 32, 0x8b4513)\n      const platform2 = this.add.rectangle(384, 200, 96, 32, 0x8b4513)\n      this.platforms.add(platform1)\n      this.platforms.add(platform2)\n      \n      console.log('⚠ Using fallback rectangle platforms - atlas not loaded')\n    }\n  }\n\n  private createPlayer() {\n    // Create Mario player sprite with enhanced positioning for 2x canvas\n    // Try different texture sources in order of preference\n    let playerTexture = 'mario-atlas'\n    let playerFrame: string | number = 'mario-idle'\n    \n    if (this.textures.exists('mario-atlas')) {\n      playerTexture = 'mario-atlas'\n      playerFrame = 'mario-idle'\n    } else if (this.textures.exists('mario-sprites')) {\n      playerTexture = 'mario-sprites'\n      playerFrame = 5 // Frame 5 should be idle based on sprite sheet layout\n    } else if (this.textures.exists('mario-atlas-svg')) {\n      playerTexture = 'mario-atlas-svg'\n      playerFrame = 0\n    }\n    \n    console.log(`Creating player with texture: ${playerTexture}, frame: ${playerFrame}`)\n    this.player = this.physics.add.sprite(64, 200, playerTexture, playerFrame) // Scaled starting position\n    \n    // Set player properties with proper scaling and positioning\n    this.player.setCollideWorldBounds(true)\n    \n    // Set display size first (clean 2x scaling from 16x16 -> 32x32)\n    this.player.setDisplaySize(GAME_CONSTANTS.PLAYER.SIZE.width, GAME_CONSTANTS.PLAYER.SIZE.height) \n    \n    // Set collision body size slightly smaller than display for better gameplay\n    if (this.player.body) {\n      this.player.body.setSize(28, 30) // Slightly smaller than 32x32 display\n      this.player.body.setOffset(2, 2) // Center collision body within display sprite\n    }\n    \n    // Ensure proper bounds checking to prevent screen edge cutoff\n    this.updatePlayerBounds()\n    \n    // Player physics - use global gravity (no need to set individual gravity)\n    console.log('✓ Mario player created with proper scaling and collision bounds')\n  }\n\n  private updatePlayerBounds() {\n    // Prevent player from going off-screen edges to ensure full visibility\n    const halfWidth = GAME_CONSTANTS.PLAYER.SIZE.width / 2\n    const halfHeight = GAME_CONSTANTS.PLAYER.SIZE.height / 2\n    \n    if (this.player.x < halfWidth) this.player.x = halfWidth\n    if (this.player.x > this.cameras.main.width - halfWidth) {\n      this.player.x = this.cameras.main.width - halfWidth\n    }\n    \n    // Keep player above ground level to prevent cutoff\n    if (this.player.y > GAME_CONSTANTS.WORLD.GROUND_LEVEL - halfHeight) {\n      this.player.y = GAME_CONSTANTS.WORLD.GROUND_LEVEL - halfHeight\n      this.player.setVelocityY(0)\n    }\n  }\n\n  private createContentBoxes() {\n    this.contentBoxes = this.physics.add.group()\n    \n    // Enhanced box size for 2x canvas scaling\n    const boxSize = GAME_CONSTANTS.BOXES.SIZE.width\n    \n    if (this.textures.exists('mario-atlas')) {\n      // Resume box using specific atlas frame\n      const resumeBox = this.physics.add.sprite(\n        GAME_CONSTANTS.BOXES.POSITIONS.RESUME.x,\n        GAME_CONSTANTS.BOXES.POSITIONS.RESUME.y,\n        'mario-atlas',\n        'box-resume'\n      )\n      resumeBox.setData('content', 'resume')\n      resumeBox.setSize(boxSize, boxSize)\n      resumeBox.setDisplaySize(boxSize, boxSize) // Enhanced display size for 2x canvas\n      resumeBox.setTint(0xffd700) // Golden color for Resume\n      \n      // Portfolio box using specific atlas frame\n      const portfolioBox = this.physics.add.sprite(\n        GAME_CONSTANTS.BOXES.POSITIONS.PORTFOLIO.x,\n        GAME_CONSTANTS.BOXES.POSITIONS.PORTFOLIO.y,\n        'mario-atlas',\n        'box-portfolio'\n      )\n      portfolioBox.setData('content', 'portfolio')\n      portfolioBox.setSize(boxSize, boxSize)\n      portfolioBox.setDisplaySize(boxSize, boxSize)\n      portfolioBox.setTint(0x00ff00) // Green color for Portfolio\n      \n      // Contact box using specific atlas frame\n      const contactBox = this.physics.add.sprite(\n        GAME_CONSTANTS.BOXES.POSITIONS.CONTACT.x,\n        GAME_CONSTANTS.BOXES.POSITIONS.CONTACT.y,\n        'mario-atlas',\n        'box-contact'\n      )\n      contactBox.setData('content', 'contact')\n      contactBox.setSize(boxSize, boxSize)\n      contactBox.setDisplaySize(boxSize, boxSize)\n      contactBox.setTint(0x0080ff) // Blue color for Contact\n      \n      // Add boxes to group\n      this.contentBoxes.addMultiple([resumeBox, portfolioBox, contactBox])\n      \n      console.log('✓ Content boxes created using professional atlas frames with enhanced scaling')\n    } else {\n      // Fallback to atlas sprites if blocks sprite doesn't load\n      const resumeBox = this.physics.add.sprite(\n        GAME_CONSTANTS.BOXES.POSITIONS.RESUME.x,\n        GAME_CONSTANTS.BOXES.POSITIONS.RESUME.y,\n        'mario-atlas',\n        'mario-idle' // Fallback frame\n      )\n      resumeBox.setData('content', 'resume')\n      resumeBox.setSize(boxSize, boxSize)\n      resumeBox.setDisplaySize(boxSize, boxSize)\n      resumeBox.setTint(0xffd700)\n      \n      const portfolioBox = this.physics.add.sprite(\n        GAME_CONSTANTS.BOXES.POSITIONS.PORTFOLIO.x,\n        GAME_CONSTANTS.BOXES.POSITIONS.PORTFOLIO.y,\n        'mario-atlas',\n        'mario-idle'\n      )\n      portfolioBox.setData('content', 'portfolio')\n      portfolioBox.setSize(boxSize, boxSize)\n      portfolioBox.setDisplaySize(boxSize, boxSize)\n      portfolioBox.setTint(0x00ff00)\n      \n      const contactBox = this.physics.add.sprite(\n        GAME_CONSTANTS.BOXES.POSITIONS.CONTACT.x,\n        GAME_CONSTANTS.BOXES.POSITIONS.CONTACT.y,\n        'mario-atlas',\n        'mario-idle'\n      )\n      contactBox.setData('content', 'contact')\n      contactBox.setSize(boxSize, boxSize)\n      contactBox.setDisplaySize(boxSize, boxSize)\n      contactBox.setTint(0x0080ff)\n      \n      this.contentBoxes.addMultiple([resumeBox, portfolioBox, contactBox])\n      \n      console.log('⚠ Using fallback mario atlas for content boxes - block sprites not loaded')\n    }\n    \n    // Make boxes static (don't fall with gravity)\n    this.contentBoxes.children.entries.forEach((box: any) => {\n      if (box.body && 'setGravityY' in box.body) {\n        box.body.setGravityY(-GAME_CONSTANTS.WORLD.GRAVITY) // Cancel out gravity\n      }\n    })\n  }\n\n  private setupControls() {\n    // Arrow keys\n    this.cursors = this.input.keyboard!.createCursorKeys()\n    \n    // WASD keys\n    this.wasd = {\n      'W': this.input.keyboard!.addKey(Phaser.Input.Keyboard.KeyCodes.W),\n      'A': this.input.keyboard!.addKey(Phaser.Input.Keyboard.KeyCodes.A),\n      'S': this.input.keyboard!.addKey(Phaser.Input.Keyboard.KeyCodes.S),\n      'D': this.input.keyboard!.addKey(Phaser.Input.Keyboard.KeyCodes.D),\n    }\n    \n    // Space for jump\n    const spaceKey = this.input.keyboard!.addKey(Phaser.Input.Keyboard.KeyCodes.SPACE)\n    spaceKey.on('down', () => {\n      this.handleJump()\n    })\n  }\n\n  private setupGameBoyControls() {\n    // Subscribe to GameBoy button events\n    EventBus.on(GAME_EVENTS.GAMEBOY_DPAD_LEFT, (data: { pressed: boolean }) => {\n      this.gameBoyButtons.left = data.pressed\n      console.log(`GameBoy D-pad left: ${data.pressed}`)\n    })\n\n    EventBus.on(GAME_EVENTS.GAMEBOY_DPAD_RIGHT, (data: { pressed: boolean }) => {\n      this.gameBoyButtons.right = data.pressed\n      console.log(`GameBoy D-pad right: ${data.pressed}`)\n    })\n\n    EventBus.on(GAME_EVENTS.GAMEBOY_BUTTON_A, (data: { pressed: boolean }) => {\n      this.gameBoyButtons.A = data.pressed\n      if (data.pressed) {\n        this.handleJump()\n      }\n      console.log(`GameBoy A button: ${data.pressed}`)\n    })\n\n    EventBus.on(GAME_EVENTS.GAMEBOY_BUTTON_B, (data: { pressed: boolean }) => {\n      this.gameBoyButtons.B = data.pressed\n      if (data.pressed) {\n        this.handleJump()\n      }\n      console.log(`GameBoy B button: ${data.pressed}`)\n    })\n\n    console.log('GameBoy button controls integrated with Phaser MainScene')\n  }\n\n  private setupCollisions() {\n    // Player vs platforms\n    this.physics.add.collider(this.player, this.platforms, () => {\n      this.isGrounded = true\n    })\n    \n    // Player vs content boxes\n    this.physics.add.overlap(this.player, this.contentBoxes, (_player, box) => {\n      this.handleBoxHit(box as Phaser.Physics.Arcade.Sprite)\n    })\n    \n    // Content boxes vs platforms (so they don't fall through)\n    this.physics.add.collider(this.contentBoxes, this.platforms)\n  }\n\n  private setupAnimations() {\n    // Determine which texture source to use for animations\n    let animTexture = 'mario-atlas'\n    let idleFrame: string | number = 'mario-idle'\n    let walkFrames: Array<{key: string, frame: string | number}> = [\n      { key: 'mario-atlas', frame: 'mario-walk-1' },\n      { key: 'mario-atlas', frame: 'mario-walk-2' }\n    ]\n    let jumpFrame: string | number = 'mario-jump'\n    \n    if (this.textures.exists('mario-atlas')) {\n      // Use atlas frames\n      animTexture = 'mario-atlas'\n      idleFrame = 'mario-idle'\n      walkFrames = [\n        { key: 'mario-atlas', frame: 'mario-walk-1' },\n        { key: 'mario-atlas', frame: 'mario-walk-2' }\n      ]\n      jumpFrame = 'mario-jump'\n    } else if (this.textures.exists('mario-sprites')) {\n      // Use spritesheet frames\n      animTexture = 'mario-sprites'\n      idleFrame = 5\n      walkFrames = [\n        { key: 'mario-sprites', frame: 6 },\n        { key: 'mario-sprites', frame: 7 }\n      ]\n      jumpFrame = 8\n    } else {\n      // Use SVG fallback with single frame\n      animTexture = 'mario-atlas-svg'\n      idleFrame = 0\n      walkFrames = [{ key: 'mario-atlas-svg', frame: 0 }]\n      jumpFrame = 0\n    }\n    \n    console.log(`Setting up animations with texture: ${animTexture}`)\n    \n    // Create walking animation\n    if (!this.anims.exists('mario-walk')) {\n      this.anims.create({\n        key: 'mario-walk',\n        frames: walkFrames,\n        frameRate: GAME_CONSTANTS.ANIMATIONS.FRAME_RATE,\n        repeat: -1\n      })\n    }\n    \n    // Create idle animation\n    if (!this.anims.exists('mario-idle')) {\n      this.anims.create({\n        key: 'mario-idle',\n        frames: [{ key: animTexture, frame: idleFrame }],\n        frameRate: 1\n      })\n    }\n    \n    // Create jump animation\n    if (!this.anims.exists('mario-jump')) {\n      this.anims.create({\n        key: 'mario-jump',\n        frames: [{ key: animTexture, frame: jumpFrame }],\n        frameRate: 1\n      })\n    }\n  }\n\n  update() {\n    this.handlePlayerMovement()\n    this.updateAnimations()\n    this.checkGrounded()\n    this.updateBackground()\n    this.updatePlayerBounds() // Ensure Mario stays fully visible\n  }\n\n  private updateBackground() {\n    // Background is now static, no automatic scrolling\n    // Level progression happens through edge-triggered transitions\n    this.checkAreaTransitions()\n  }\n\n  private handlePlayerMovement() {\n    const speed = GAME_CONSTANTS.PLAYER.SPEED\n    \n    // Horizontal movement - integrate keyboard AND GameBoy button controls\n    const leftPressed = this.cursors.left.isDown || this.wasd.A.isDown || this.gameBoyButtons.left\n    const rightPressed = this.cursors.right.isDown || this.wasd.D.isDown || this.gameBoyButtons.right\n    \n    if (leftPressed) {\n      this.player.setVelocityX(-speed)\n      this.player.setFlipX(true)\n    } else if (rightPressed) {\n      this.player.setVelocityX(speed)\n      this.player.setFlipX(false)\n    } else {\n      // Apply friction\n      const currentVelocityX = this.player.body!.velocity.x\n      const friction = this.isGrounded ? \n        GAME_CONSTANTS.PLAYER.GROUND_FRICTION : \n        GAME_CONSTANTS.PLAYER.AIR_FRICTION\n      \n      if (Math.abs(currentVelocityX) < 10) {\n        this.player.setVelocityX(0)\n      } else {\n        const newVelocityX = currentVelocityX > 0 ? \n          Math.max(0, currentVelocityX - friction * (1/60)) :\n          Math.min(0, currentVelocityX + friction * (1/60))\n        this.player.setVelocityX(newVelocityX)\n      }\n    }\n    \n    // Jumping (handled in setupControls)\n    if ((this.cursors.up.isDown || this.wasd.W.isDown) && this.isGrounded) {\n      this.handleJump()\n    }\n  }\n\n  private handleJump() {\n    if (this.isGrounded) {\n      this.player.setVelocityY(GAME_CONSTANTS.PLAYER.JUMP_VELOCITY)\n      this.isGrounded = false\n      EventBus.emit(GAME_EVENTS.PLAYER_JUMPED)\n    }\n  }\n\n  private updateAnimations() {\n    if (!this.isGrounded) {\n      // In air\n      this.player.play('mario-jump', true)\n    } else if (Math.abs(this.player.body!.velocity.x) > 10) {\n      // Moving\n      this.player.play('mario-walk', true)\n    } else {\n      // Idle\n      this.player.play('mario-idle', true)\n    }\n  }\n\n  private checkGrounded() {\n    // Reset grounded state, will be set to true by collision callback\n    this.isGrounded = false\n  }\n\n  private handleBoxHit(box: Phaser.Physics.Arcade.Sprite) {\n    const contentType = box.getData('content')\n    \n    // Visual feedback - make box bounce\n    this.tweens.add({\n      targets: box,\n      y: box.y - 10,\n      duration: 100,\n      yoyo: true,\n      ease: 'Power2'\n    })\n    \n    // Emit events to React\n    EventBus.emit(GAME_EVENTS.BOX_HIT, { type: contentType, box })\n    EventBus.emit(GAME_EVENTS.CONTENT_TRIGGER, contentType)\n    \n    console.log(`Player hit ${contentType} box!`)\n  }\n\n  private getRandomBlockFrame(type: 'ground' | 'platform' | 'decorative'): string {\n    // Block variety system - use available atlas frames\n    const blockTypes = {\n      ground: ['ground-tile'], // For now, just ground-tile available\n      platform: ['ground-tile'], // Can be expanded when more frames are added\n      decorative: ['box-resume', 'box-portfolio', 'box-contact']\n    }\n\n    const availableFrames = blockTypes[type] || blockTypes.ground\n    const randomIndex = Math.floor(Math.random() * availableFrames.length)\n    return availableFrames[randomIndex]\n  }\n\n  private checkAreaTransitions() {\n    if (this.transitioning) return // Prevent multiple transitions\n\n    const playerX = this.player.x\n    const playerVelocityX = this.player.body?.velocity.x || 0\n    const screenWidth = this.cameras.main.width\n\n    // Left edge detection - only if moving left\n    if (playerX <= 20 && playerVelocityX < 0 && this.currentArea > 0) {\n      this.transitionToArea('left')\n    }\n\n    // Right edge detection - only if moving right\n    if (playerX >= screenWidth - 20 && playerVelocityX > 0) {\n      this.transitionToArea('right')\n    }\n  }\n\n  private transitionToArea(direction: 'left' | 'right') {\n    // Prevent multiple triggers\n    this.transitioning = true\n\n    // Stop player movement\n    this.player.setVelocityX(0)\n\n    // Calculate new area\n    const areaChange = direction === 'right' ? 1 : -1\n    const newArea = Math.max(0, this.currentArea + areaChange)\n\n    console.log(`Transitioning from area ${this.currentArea} to area ${newArea}`)\n\n    // Change background theme\n    this.updateBackgroundTheme(newArea)\n\n    // Move player to opposite side with smooth transition\n    const newX = direction === 'right' ? 30 : this.cameras.main.width - 30\n\n    // Smooth transition animation\n    this.tweens.add({\n      targets: this.player,\n      x: newX,\n      duration: 300,\n      ease: 'Power2.easeInOut',\n      onComplete: () => {\n        this.currentArea = newArea\n        this.transitioning = false\n        console.log(`Transition complete. Now in area ${this.currentArea}`)\n      }\n    })\n  }\n\n  private updateBackgroundTheme(areaIndex: number) {\n    // Cycle through available themes\n    const themeIndex = areaIndex % this.backgroundThemes.length\n    const themePath = this.backgroundThemes[themeIndex]\n\n    console.log(`Updating background theme to: ${themePath}`)\n\n    // For now, since we're reusing the same background, we can add a tint variation\n    // to simulate different themes\n    const themeColors = [\n      0xffffff, // Original color (overworld)\n      0xffe6cc, // Slightly warmer (underground feel)\n      0xe6f2ff, // Cooler blue tint (sky feel)\n      0xf0e6ff  // Purple tint (castle feel)\n    ]\n\n    if (this.background) {\n      const tintColor = themeColors[themeIndex % themeColors.length]\n      this.background.setTint(tintColor)\n    }\n\n    // Emit theme change event for React UI\n    EventBus.emit(GAME_EVENTS.AREA_CHANGED, { \n      area: areaIndex,\n      theme: ['overworld', 'underground', 'sky', 'castle'][themeIndex % 4]\n    })\n  }\n\n  // Called when scene is destroyed  \n  destroy() {\n    // Clean up EventBus subscriptions to prevent memory leaks\n    EventBus.off(GAME_EVENTS.GAMEBOY_DPAD_LEFT, () => {})\n    EventBus.off(GAME_EVENTS.GAMEBOY_DPAD_RIGHT, () => {})\n    EventBus.off(GAME_EVENTS.GAMEBOY_BUTTON_A, () => {})\n    EventBus.off(GAME_EVENTS.GAMEBOY_BUTTON_B, () => {})\n    \n    EventBus.emit(GAME_EVENTS.GAME_DESTROYED)\n    console.log('MainScene destroyed, GameBoy controls cleaned up')\n  }\n}","import Phaser from 'phaser'\nimport PreloadScene from '../components/Game/scenes/PreloadScene'\nimport MainScene from '../components/Game/scenes/MainScene'\n\n/**\n * Phaser 3 Game Configuration\n * Optimized for GameBoy screen dimensions and Mario platformer mechanics\n */\nconst gameConfig: Phaser.Types.Core.GameConfig = {\n  type: Phaser.AUTO, // WebGL with Canvas fallback\n  width: 640, // Enhanced canvas width for improved visibility (2x scaling)\n  height: 480, // Enhanced canvas height for better gameplay experience (2x scaling)\n  parent: 'phaser-game-container', // Container div ID\n  backgroundColor: '#c7d32c', // GameBoy screen color\n  \n  // Physics configuration for Mario platformer\n  physics: {\n    default: 'arcade',\n    arcade: {\n      gravity: { x: 0, y: 800 }, // Mario-style gravity\n      debug: false, // Set to true for development debugging\n    },\n  },\n  \n  // Scene configuration\n  scene: [PreloadScene, MainScene],\n  \n  // Rendering configuration for pixel art - enhanced for larger scale\n  render: {\n    pixelArt: true,\n    antialias: false,\n    roundPixels: true,\n    powerPreference: 'high-performance', // Better performance for larger canvas\n  },\n  \n  // Scale configuration for enhanced responsive design with larger canvas\n  scale: {\n    mode: Phaser.Scale.FIT,\n    autoCenter: Phaser.Scale.CENTER_BOTH,\n    parent: 'phaser-game-container',\n    width: 640,\n    height: 480,\n    min: {\n      width: 320,\n      height: 240,\n    },\n    max: {\n      width: 1280,\n      height: 960,\n    },\n  },\n  \n  // Input configuration\n  input: {\n    keyboard: true,\n    gamepad: false, // Disable gamepad for now\n  },\n  \n  // Audio configuration\n  audio: {\n    disableWebAudio: false,\n  },\n  \n  // Banner configuration\n  banner: {\n    hidePhaser: true, // Hide Phaser banner in console\n  },\n}\n\nexport default gameConfig\n\n// Game constants for Mario platformer mechanics - Enhanced for 2x scaling\nexport const GAME_CONSTANTS = {\n  PLAYER: {\n    SPEED: 320, // Scaled 2x for enhanced canvas\n    JUMP_VELOCITY: -1000, // Scaled 2x for enhanced canvas\n    SIZE: { width: 32, height: 32 }, // Scaled 2x for enhanced canvas\n    GROUND_FRICTION: 1600, // Scaled 2x for enhanced canvas\n    AIR_FRICTION: 600, // Scaled 2x for enhanced canvas\n  },\n  \n  WORLD: {\n    GRAVITY: 1600, // Scaled 2x for enhanced canvas\n    GROUND_LEVEL: 400, // Scaled 2x for enhanced 480px height\n    BOUNDS: { width: 640, height: 480 }, // Enhanced dimensions for 2x scaling\n  },\n  \n  BOXES: {\n    SIZE: { width: 64, height: 64 }, // Scaled 2x for enhanced canvas\n    BOUNCE_FORCE: -200, // Scaled 2x for enhanced canvas\n    POSITIONS: {\n      RESUME: { x: 200, y: 336 }, // Scaled 2x and repositioned for enhanced canvas\n      PORTFOLIO: { x: 320, y: 336 }, // Scaled 2x and repositioned for enhanced canvas\n      CONTACT: { x: 440, y: 336 }, // Scaled 2x and repositioned for enhanced canvas\n    },\n  },\n  \n  ANIMATIONS: {\n    FRAME_RATE: 8, // 8 FPS for retro feel - unchanged\n    WALK_FRAMES: ['mario-idle', 'mario-walk-1', 'mario-walk-2'],\n    JUMP_FRAME: 'mario-jump',\n  },\n} as const","import React, { useEffect, useRef, useState } from 'react'\nimport Phaser from 'phaser'\nimport gameConfig from '../../utils/gameConfig'\nimport EventBus, { GAME_EVENTS } from './EventBus'\nimport { gameAccessibility, keyboardNavigation } from '../../utils/accessibility'\n\ninterface PhaserGameProps {\n  currentActiveScene?: (scene: Phaser.Scene) => void\n  onContentTrigger?: (contentType: string) => void\n  className?: string\n}\n\nconst PhaserGame: React.FC<PhaserGameProps> = ({ \n  currentActiveScene, \n  onContentTrigger,\n  className = '' \n}) => {\n  const gameRef = useRef<HTMLDivElement>(null)\n  const phaserGameRef = useRef<Phaser.Game | null>(null)\n  const [loadingProgress, setLoadingProgress] = useState(0)\n  const [isGameReady, setIsGameReady] = useState(false)\n  const [showMobileInstructions, setShowMobileInstructions] = useState(false)\n\n  // Detect if device is mobile/tablet\n  const isMobileDevice = /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent) || window.innerWidth <= 768\n\n  useEffect(() => {\n    // Initialize Phaser game\n    if (gameRef.current && !phaserGameRef.current) {\n      // Create the game instance\n      phaserGameRef.current = new Phaser.Game({\n        ...gameConfig,\n        parent: gameRef.current, // Mount to our div\n      })\n\n      // Setup event listeners\n      const handleGameReady = () => {\n        console.log('🎉 React received GAME_READY event - hiding loading screen...')\n        setIsGameReady(true)\n        console.log('Phaser game ready!')\n        \n        // Announce game ready for screen readers\n        gameAccessibility.announceGameStart()\n        \n        // Show mobile instructions on mobile devices\n        if (isMobileDevice) {\n          setShowMobileInstructions(true)\n          setTimeout(() => setShowMobileInstructions(false), 4000)\n        }\n      }\n\n      const handleSceneReady = (scene: Phaser.Scene) => {\n        currentActiveScene?.(scene)\n        console.log(`Scene ready: ${scene.scene.key}`)\n      }\n\n      const handleContentTrigger = (contentType: string) => {\n        onContentTrigger?.(contentType)\n        console.log(`Content triggered: ${contentType}`)\n        \n        // Announce navigation for screen readers\n        gameAccessibility.announceBoxHit(contentType)\n      }\n\n      const handleLoadingProgress = (progress: number) => {\n        console.log(`📊 Loading progress: ${progress}%`)\n        setLoadingProgress(progress)\n      }\n\n      const handleBoxHit = ({ type }: { type: string; box: any }) => {\n        console.log(`Box hit: ${type}`)\n        // Could add more visual feedback here\n      }\n\n      // Register event listeners\n      EventBus.on(GAME_EVENTS.GAME_READY, handleGameReady)\n      EventBus.on(GAME_EVENTS.SCENE_READY, handleSceneReady)\n      EventBus.on(GAME_EVENTS.CONTENT_TRIGGER, handleContentTrigger)\n      EventBus.on(GAME_EVENTS.LOADING_PROGRESS, handleLoadingProgress)\n      EventBus.on(GAME_EVENTS.BOX_HIT, handleBoxHit)\n\n      // Cleanup function\n      return () => {\n        EventBus.off(GAME_EVENTS.GAME_READY, handleGameReady)\n        EventBus.off(GAME_EVENTS.SCENE_READY, handleSceneReady)\n        EventBus.off(GAME_EVENTS.CONTENT_TRIGGER, handleContentTrigger)\n        EventBus.off(GAME_EVENTS.LOADING_PROGRESS, handleLoadingProgress)\n        EventBus.off(GAME_EVENTS.BOX_HIT, handleBoxHit)\n        \n        if (phaserGameRef.current) {\n          phaserGameRef.current.destroy(true)\n          phaserGameRef.current = null\n          setIsGameReady(false)\n          setLoadingProgress(0)\n        }\n      }\n    }\n  }, [currentActiveScene, onContentTrigger])\n\n  // Cleanup on unmount\n  useEffect(() => {\n    return () => {\n      if (phaserGameRef.current) {\n        phaserGameRef.current.destroy(true)\n        phaserGameRef.current = null\n      }\n    }\n  }, [])\n\n  // Handle GameBoy button presses\n  const handleButtonPress = (button: string) => {\n    if (!phaserGameRef.current) return\n\n    // Send button events to Phaser\n    const currentScene = phaserGameRef.current.scene.getScene('MainScene')\n    if (currentScene && currentScene.input && currentScene.input.keyboard) {\n      // Simulate keyboard events for GameBoy buttons\n      switch (button) {\n        case 'A':\n          // Simulate spacebar for jump\n          currentScene.input.keyboard.emit('keydown-SPACE')\n          break\n        case 'B':\n          // Could be used for special actions\n          break\n        case 'up':\n          currentScene.input.keyboard.emit('keydown-UP')\n          break\n        case 'down':\n          currentScene.input.keyboard.emit('keydown-DOWN')\n          break\n        case 'left':\n          currentScene.input.keyboard.emit('keydown-LEFT')\n          break\n        case 'right':\n          currentScene.input.keyboard.emit('keydown-RIGHT')\n          break\n        case 'START':\n          // Could pause/unpause the game\n          break\n        case 'SELECT':\n          // Could open a menu or switch backgrounds\n          break\n        default:\n          break\n      }\n    }\n\n    EventBus.emit(GAME_EVENTS.BUTTON_PRESSED, button)\n  }\n\n  // Touch controls for mobile\n  const handleTouchStart = (e: React.TouchEvent) => {\n    e.preventDefault()\n    const rect = gameRef.current?.getBoundingClientRect()\n    if (!rect || !phaserGameRef.current) return\n\n    const touch = e.touches[0]\n    const x = touch.clientX - rect.left\n    const y = touch.clientY - rect.top\n    const width = rect.width\n    const height = rect.height\n\n    // Divide screen into zones for touch controls\n    const leftZone = width * 0.3\n    const rightZone = width * 0.7\n    const jumpZone = height * 0.5\n\n    // Left side = move left\n    if (x < leftZone) {\n      handleButtonPress('left')\n    }\n    // Right side = move right\n    else if (x > rightZone) {\n      handleButtonPress('right')\n    }\n    \n    // Upper half = jump\n    if (y < jumpZone) {\n      handleButtonPress('A') // A button jumps\n    }\n  }\n\n  // Expose button handler to parent via ref\n  useEffect(() => {\n    // Store reference to button handler for external access\n    if (gameRef.current) {\n      (gameRef.current as any).handleButtonPress = handleButtonPress\n    }\n  }, [])\n\n  return (\n    <div className={`phaser-game-wrapper ${className}`}>\n      {/* Game container */}\n      <div \n        ref={gameRef}\n        id=\"phaser-game-container\"\n        className=\"w-full h-full touch-manipulation\"\n        style={{ \n          imageRendering: 'pixelated',\n          touchAction: 'none' // Prevent default touch behaviors\n        }}\n        onTouchStart={handleTouchStart}\n        onKeyDown={(e) => keyboardNavigation.handleGameKeyboard(e.nativeEvent)}\n        role=\"application\"\n        aria-label=\"Mario platformer game. Use arrow keys or WASD to move Mario, spacebar to jump. Hit colored boxes to navigate to Resume (gold), Portfolio (green), or Contact (blue) sections.\"\n        tabIndex={0}\n      />\n      \n      {/* Loading overlay */}\n      {!isGameReady && (\n        <div className=\"absolute inset-0 bg-gameboy-screen flex flex-col items-center justify-center\">\n          <div className=\"text-gameboy-darkest font-gameboy text-center\">\n            <div className=\"text-lg mb-2\">MARIO</div>\n            <div className=\"text-xs mb-4\">Loading... {loadingProgress}%</div>\n            <div className=\"flex justify-center space-x-1\">\n              <div className=\"w-2 h-2 bg-gameboy-darkest rounded-full animate-bounce\"></div>\n              <div className=\"w-2 h-2 bg-gameboy-darkest rounded-full animate-bounce\" style={{ animationDelay: '0.1s' }}></div>\n              <div className=\"w-2 h-2 bg-gameboy-darkest rounded-full animate-bounce\" style={{ animationDelay: '0.2s' }}></div>\n            </div>\n          </div>\n        </div>\n      )}\n      \n      {/* Mobile touch instructions */}\n      {showMobileInstructions && (\n        <div className=\"absolute inset-0 bg-gameboy-screen bg-opacity-90 flex items-center justify-center z-10\">\n          <div className=\"text-gameboy-darkest font-gameboy text-center p-4\">\n            <div className=\"text-sm mb-2\">Touch Controls</div>\n            <div className=\"text-xs mb-1\">Tap left side: ← Move left</div>\n            <div className=\"text-xs mb-1\">Tap right side: Move right →</div>\n            <div className=\"text-xs mb-3\">Tap upper area: Jump ↑</div>\n            <div className=\"text-xs opacity-75\">Or use the GameBoy buttons below</div>\n          </div>\n        </div>\n      )}\n\n      {/* Game ready indicator (for debugging) */}\n      {isGameReady && process.env.NODE_ENV === 'development' && (\n        <div className=\"absolute top-2 right-2 text-xs bg-green-500 text-white px-2 py-1 rounded\">\n          Game Ready\n        </div>\n      )}\n    </div>\n  )\n}\n\nexport default PhaserGame"],"file":"assets/game-hnuPS22Q.js"}